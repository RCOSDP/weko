#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create author community relation tables."""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b2ce1889616c'
down_revision = '1e377b157a5d'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('author_affiliation_community_relations',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('affiliation_id', sa.BigInteger(), nullable=False),
    sa.Column('community_id', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['affiliation_id'], ['authors_affiliation_settings.id'], name=op.f('fk_author_affiliation_community_relations_affiliation_id_authors_affiliation_settings'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['community_id'], ['communities_community.id'], name=op.f('fk_author_affiliation_community_relations_community_id_communities_community'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('affiliation_id', 'community_id', name=op.f('pk_author_affiliation_community_relations'))
    )
    op.create_table('author_community_relations',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('author_id', sa.BigInteger(), nullable=False),
    sa.Column('community_id', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], name=op.f('fk_author_community_relations_author_id_authors'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['community_id'], ['communities_community.id'], name=op.f('fk_author_community_relations_community_id_communities_community'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('author_id', 'community_id', name=op.f('pk_author_community_relations'))
    )
    op.create_table('author_prefix_community_relations',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('prefix_id', sa.BigInteger(), nullable=False),
    sa.Column('community_id', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['communities_community.id'], name=op.f('fk_author_prefix_community_relations_community_id_communities_community'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prefix_id'], ['authors_prefix_settings.id'], name=op.f('fk_author_prefix_community_relations_prefix_id_authors_prefix_settings'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('prefix_id', 'community_id', name=op.f('pk_author_prefix_community_relations'))
    )
    op.drop_column('authors', 'repository_id')
    op.drop_column('authors_affiliation_settings', 'repository_id')
    op.drop_column('authors_prefix_settings', 'repository_id')
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('authors_prefix_settings', sa.Column('repository_id', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('authors_affiliation_settings', sa.Column('repository_id', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('authors', sa.Column('repository_id', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_table('author_prefix_community_relations')
    op.drop_table('author_community_relations')
    op.drop_table('author_affiliation_community_relations')
    # ### end Alembic commands ###
