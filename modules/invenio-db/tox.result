GLOB sdist-make: /code/modules/invenio-db/setup.py
c1 inst-nodeps: /code/modules/invenio-db/.tox/.tmp/package/1/invenio-db-1.0.4.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,invenio-db @ file:///code/modules/invenio-db/.tox/.tmp/package/1/invenio-db-1.0.4.zip,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@1ea2ab266aece30a5e18ebcb3c03bc86ad2c2d60#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='1520740586'
c1 run-test: commands[0] | pytest --cov=invenio_db tests -v --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/invenio-db/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-db/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-db, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 28 items

tests/test_cli.py::test_abort_if_false ERROR                             [  3%]
tests/test_cli.py::test_drop[True] PASSED                                [  7%]
tests/test_cli.py::test_drop[True] ERROR                                 [  7%]
tests/test_cli.py::test_drop[False] PASSED                               [ 10%]
tests/test_cli.py::test_drop[False] ERROR                                [ 10%]
tests/test_cli.py::test_init ERROR                                       [ 14%]
tests/test_cli.py::test_init ERROR                                       [ 14%]
tests/test_cli.py::test_destroy ERROR                                    [ 17%]
tests/test_cli.py::test_destroy ERROR                                    [ 17%]
tests/test_db.py::test_init PASSED                                       [ 21%]
tests/test_db.py::test_init ERROR                                        [ 21%]
tests/test_db.py::test_alembic PASSED                                    [ 25%]
tests/test_db.py::test_alembic ERROR                                     [ 25%]
tests/test_db.py::test_naming_convention PASSED                          [ 28%]
tests/test_db.py::test_naming_convention ERROR                           [ 28%]
tests/test_db.py::test_transaction PASSED                                [ 32%]
tests/test_db.py::test_transaction ERROR                                 [ 32%]
tests/test_db.py::test_entry_points PASSED                               [ 35%]
tests/test_db.py::test_entry_points ERROR                                [ 35%]
tests/test_db.py::test_local_proxy PASSED                                [ 39%]
tests/test_db.py::test_local_proxy ERROR                                 [ 39%]
tests/test_examples_app.py::test_example_app PASSED                      [ 42%]
tests/test_invenio_db.py::test_version PASSED                            [ 46%]
tests/test_invenio_db.py::test_init PASSED                               [ 50%]
tests/test_invenio_db.py::test_init_db PASSED                            [ 53%]
tests/test_shared.py::TestSQLAlchemy::test_apply_driver_hacks PASSED     [ 57%]
tests/test_shared.py::TestSQLAlchemy::test_apply_driver_hacks ERROR      [ 57%]
tests/test_shared.py::TestSQLAlchemy::test_set_db_connection_pool PASSED [ 60%]
tests/test_shared.py::TestSQLAlchemy::test_set_db_connection_pool ERROR  [ 60%]
tests/test_utils.py::test_rebuild_encrypted_properties FAILED            [ 64%]
tests/test_utils.py::test_rebuild_encrypted_properties ERROR             [ 64%]
tests/test_utils.py::test_versioning_model_classname PASSED              [ 67%]
tests/test_utils.py::test_versioning_model_classname ERROR               [ 67%]
tests/test_utils.py::test_versioning_models_registered PASSED            [ 71%]
tests/test_utils.py::test_versioning_models_registered ERROR             [ 71%]
tests/test_utils.py::test_create_alembic_version_table[True] FAILED      [ 75%]
tests/test_utils.py::test_create_alembic_version_table[True] ERROR       [ 75%]
tests/test_utils.py::test_create_alembic_version_table[False] FAILED     [ 78%]
tests/test_utils.py::test_create_alembic_version_table[False] ERROR      [ 78%]
tests/test_utils.py::test_drop_alembic_version_table FAILED              [ 82%]
tests/test_utils.py::test_drop_alembic_version_table ERROR               [ 82%]
tests/test_versioning.py::test_disabled_versioning PASSED                [ 85%]
tests/test_versioning.py::test_disabled_versioning ERROR                 [ 85%]
tests/test_versioning.py::test_disabled_versioning_with_custom_table[False-1] SKIPPED [ 89%]
tests/test_versioning.py::test_disabled_versioning_with_custom_table[True-3] SKIPPED [ 92%]
tests/test_versioning.py::test_versioning SKIPPED                        [ 96%]
tests/test_versioning.py::test_versioning_without_versioned_tables PASSED [100%]
tests/test_versioning.py::test_versioning_without_versioned_tables ERROR [100%]

==================================== ERRORS ====================================
____________________ ERROR at setup of test_abort_if_false _____________________
file /code/modules/invenio-db/tests/test_cli.py, line 18
  def test_abort_if_false(mocker):
E       fixture 'mocker' not found
>       available fixtures: app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, cov, db, depends_on_current_app, doctest_namespace, instance_path, mock_entry_points, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, recwarn, script_info, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/invenio-db/tests/test_cli.py:18
_____________________ ERROR at teardown of test_drop[True] _____________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
____________________ ERROR at teardown of test_drop[False] _____________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
_________________________ ERROR at setup of test_init __________________________
file /code/modules/invenio-db/tests/test_cli.py, line 61
  def test_init(app,db,script_info, mock_entry_points, mocker):
E       fixture 'mocker' not found
>       available fixtures: app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, cov, db, depends_on_current_app, doctest_namespace, instance_path, mock_entry_points, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, recwarn, script_info, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/invenio-db/tests/test_cli.py:61
________________________ ERROR at teardown of test_init ________________________

tp = <class 'AssertionError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:887: in get_engine
    state = get_state(app)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    def get_state(app):
        """Gets the state for the application"""
        assert 'sqlalchemy' in app.extensions, \
>           'The sqlalchemy extension was not registered to the current ' \
            'application.  Please make sure to call init_app() first.'
E       AssertionError: The sqlalchemy extension was not registered to the current application.  Please make sure to call init_app() first.

.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:570: AssertionError
________________________ ERROR at setup of test_destroy ________________________
file /code/modules/invenio-db/tests/test_cli.py, line 86
  def test_destroy(app,db,script_info,mock_entry_points,mocker):
E       fixture 'mocker' not found
>       available fixtures: app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, cov, db, depends_on_current_app, doctest_namespace, instance_path, mock_entry_points, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, recwarn, script_info, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/invenio-db/tests/test_cli.py:86
______________________ ERROR at teardown of test_destroy _______________________

tp = <class 'AssertionError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:887: in get_engine
    state = get_state(app)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    def get_state(app):
        """Gets the state for the application"""
        assert 'sqlalchemy' in app.extensions, \
>           'The sqlalchemy extension was not registered to the current ' \
            'application.  Please make sure to call init_app() first.'
E       AssertionError: The sqlalchemy extension was not registered to the current application.  Please make sure to call init_app() first.

.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:570: AssertionError
________________________ ERROR at teardown of test_init ________________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
______________________ ERROR at teardown of test_alembic _______________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
_________________ ERROR at teardown of test_naming_convention __________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
____________________ ERROR at teardown of test_transaction _____________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
____________________ ERROR at teardown of test_entry_points ____________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
____________________ ERROR at teardown of test_local_proxy _____________________

tp = <class 'FileNotFoundError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        import invenio_db
        from invenio_db import shared
        db = invenio_db.db = shared.db = shared.SQLAlchemy(
            metadata=shared.MetaData(naming_convention=shared.NAMING_CONVENTION)
        )
        yield db
        db.session.remove()
        db.drop_all()
>       os.remove(join(dirname(__file__),"../test.db"))
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/invenio-db/tests/../test.db'

tests/conftest.py:38: FileNotFoundError
_________ ERROR at teardown of TestSQLAlchemy.test_apply_driver_hacks __________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d760fda0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d761ea88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d760f518>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d764c780>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d760f518>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d7601828>
args = (<connection object at 0x7f27af4a92a8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d760f518>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af4a92a8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d760f518>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af4a92a8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d760f518>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
_______ ERROR at teardown of TestSQLAlchemy.test_set_db_connection_pool ________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d7595cc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d73111c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75950f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d6fbf860>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75950f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d763a5f8>
args = (<connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75950f0>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75950f0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75950f0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
____________ ERROR at teardown of test_rebuild_encrypted_properties ____________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d7521978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d7530108>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7521908>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7521908>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27aefe4908>
args = (<connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7521908>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7521908>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7521908>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
_____________ ERROR at teardown of test_versioning_model_classname _____________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27aed7cc50>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27e0c708c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27af4e0470>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af4e0240>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27af4e0470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d7626128>
args = (<connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27af4e0470>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27af4e0470>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27af4e0470>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
____________ ERROR at teardown of test_versioning_models_registered ____________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27aef03358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27af3e8a88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7619978>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d6f02588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7619978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d74c2a58>
args = (<connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7619978>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7619978>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7619978>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
_________ ERROR at teardown of test_create_alembic_version_table[True] _________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d6f12630>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27af1f0a48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6f12470>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6f12470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d7385ac8>
args = (<connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6f12470>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6f12470>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6f12470>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
________ ERROR at teardown of test_create_alembic_version_table[False] _________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d6fab7b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d6fb0488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab748>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab748>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d73b8198>
args = (<connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab748>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab748>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27dbfe6af8; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab748>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
_____________ ERROR at teardown of test_drop_alembic_version_table _____________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d750db00>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d70eb1c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d750dcf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d750dcf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d73a76d8>
args = (<connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d750dcf8>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d750dcf8>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d750dcf8>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
________________ ERROR at teardown of test_disabled_versioning _________________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d6fab208>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d74ca888>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab5c0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d7026208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab5c0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d6fa6588>
args = (<connection object at 0x7f27e0d24e88; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab5c0>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24e88; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab5c0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24e88; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d6fab5c0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
________ ERROR at teardown of test_versioning_without_versioned_tables _________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d7422a20>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d6d2a748>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7142780>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71429b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7142780>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d759ff28>
args = (<connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7142780>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7142780>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

tp = <class 'sqlalchemy.exc.ProgrammingError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

.tox/c1/lib/python3.6/site-packages/six.py:719: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/six.py:719: in reraise
    raise value
tests/conftest.py:37: in db
    db.drop_all()
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:971: in drop_all
    self._execute_for_all_tables(app, bind, 'drop_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4226: in drop_all
    ddl.SchemaDropper, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27af784768; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d7142780>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
=================================== FAILURES ===================================
______________________ test_rebuild_encrypted_properties _______________________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d724dba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27d7085288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d724d8d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d724def0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d724d8d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27aefe4908>
args = (<connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d724d8d0>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d724d8d0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
app = <Flask 'testapp'>

    def test_rebuild_encrypted_properties(db, app):
        old_secret_key = "SECRET_KEY_1"
        new_secret_key = "SECRET_KEY_2"
        app.secret_key = old_secret_key
    
        def _secret_key():
            return app.config.get('SECRET_KEY').encode('utf-8')
    
        class Demo(db.Model):
            __tablename__ = 'demo'
            pk = db.Column(sa.Integer, primary_key=True)
            et = db.Column(
                EncryptedType(type_in=db.Unicode, key=_secret_key), nullable=False
            )
    
        InvenioDB(app, entry_point_group=False, db=db)
    
        with app.app_context():
>           db.create_all()

tests/test_utils.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2010: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/usr/local/lib/python3.6/contextlib.py:81: in __enter__
    return next(self.gen)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2002: in _optional_conn_ctx_manager
    with self.contextual_connect() as conn:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d724d8d0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
___________________ test_create_alembic_version_table[True] ____________________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.unique_connection of <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def unique_connection(self):
        """Produce a DBAPI connection that is not referenced by any
        thread-local context.
    
        This method is equivalent to :meth:`.Pool.connect` when the
        :paramref:`.Pool.use_threadlocal` flag is not set to True.
        When :paramref:`.Pool.use_threadlocal` is True, the
        :meth:`.Pool.unique_connection` method provides a means of bypassing
        the threadlocal context.
    
        """
>       return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:374: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d71e74e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27aede8cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d71e7fd0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d71e7e10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d71e7fd0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d7385ac8>
args = (<connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d71e7fd0>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d71e7fd0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
app = <Flask 'testapp'>, has_version_table = True

    @pytest.mark.parametrize("has_version_table",[True,False])
    def test_create_alembic_version_table(db, app, has_version_table):
        idb = InvenioDB(app)
        with patch("alembic.runtime.migration.MigrationContext._has_version_table",return_value=has_version_table):
>           create_alembic_version_table()

tests/test_utils.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
invenio_db/utils.py:64: in create_alembic_version_table
    if not alembic.migration_context._has_version_table():
.tox/c1/lib/python3.6/site-packages/flask_alembic/extension.py:193: in migration_context
    conn = db.engine.connect()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2171: in connect
    return self._connection_cls(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:103: in __init__
    else engine.raw_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2259: in raw_connection
    self.pool.unique_connection, _connection
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:374: in unique_connection
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d71e7fd0>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
___________________ test_create_alembic_version_table[False] ___________________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.unique_connection of <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def unique_connection(self):
        """Produce a DBAPI connection that is not referenced by any
        thread-local context.
    
        This method is equivalent to :meth:`.Pool.connect` when the
        :paramref:`.Pool.use_threadlocal` flag is not set to True.
        When :paramref:`.Pool.use_threadlocal` is True, the
        :meth:`.Pool.unique_connection` method provides a means of bypassing
        the threadlocal context.
    
        """
>       return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:374: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d74cc3c8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27af0bd088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d74cc400>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27d74cccf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d74cc400>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d73b8198>
args = (<connection object at 0x7f27e0d24e88; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d74cc400>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24e88; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d74cc400>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
app = <Flask 'testapp'>, has_version_table = False

    @pytest.mark.parametrize("has_version_table",[True,False])
    def test_create_alembic_version_table(db, app, has_version_table):
        idb = InvenioDB(app)
        with patch("alembic.runtime.migration.MigrationContext._has_version_table",return_value=has_version_table):
>           create_alembic_version_table()

tests/test_utils.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
invenio_db/utils.py:64: in create_alembic_version_table
    if not alembic.migration_context._has_version_table():
.tox/c1/lib/python3.6/site-packages/flask_alembic/extension.py:193: in migration_context
    conn = db.engine.connect()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2171: in connect
    return self._connection_cls(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:103: in __init__
    else engine.raw_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2259: in raw_connection
    self.pool.unique_connection, _connection
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:374: in unique_connection
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24e88; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d74cc400>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
_______________________ test_drop_alembic_version_table ________________________

self = Engine(postgresql+psycopg2://invenio:***@postgresql:5432/wekotest)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f27d75e59b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.ProgrammingError'>
value = ProgrammingError('syntax error at or near "PRAGMA"\nLINE 1: PRAGMA foreign_keys=ON\n        ^\n',)
tb = <traceback object at 0x7f27aeec1488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75e5e48>
pool = <sqlalchemy.pool.QueuePool object at 0x7f27af1a28d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75e5e48>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
            connection = pool._invoke_creator(self)
            pool.logger.debug("Created new connection %r", connection)
            self.connection = connection
        except Exception as e:
            pool.logger.debug("Error on connect(): %s", e)
            raise
        else:
            if first_connect_check:
                pool.dispatch.first_connect.for_modify(
                    pool.dispatch
                ).exec_once(self.connection, self)
            if pool.dispatch.connect:
>               pool.dispatch.connect(self.connection, self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.event.attr._ListenerCollection object at 0x7f27d73a76d8>
args = (<connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>, <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75e5e48>)
kw = {}, fn = <function do_sqlite_connect at 0x7f27e0d6c7b8>

    def __call__(self, *args, **kw):
        """Execute this event."""
    
        for fn in self.parent_listeners:
>           fn(*args, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75e5e48>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       psycopg2.ProgrammingError: syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^

invenio_db/shared.py:116: ProgrammingError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
mock_entry_points = None

    def test_drop_alembic_version_table(app, db,mock_entry_points):
        # not exist alembic_version
        idb = InvenioDB(app)
>       drop_alembic_version_table()

tests/test_utils.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
invenio_db/utils.py:72: in drop_alembic_version_table
    if _db.engine.dialect.has_table(_db.engine, 'alembic_version'):
.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/postgresql/base.py:2527: in has_table
    type_=sqltypes.Unicode,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:722: in __connect
    pool.dispatch.connect(self.connection, self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/event/attr.py:295: in __call__
    fn(*args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dbapi_connection = <connection object at 0x7f27e0d24d58; dsn: 'user=invenio password=xxx dbname=wekotest host=postgresql port=5432', closed: 0>
connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f27d75e5e48>

    def do_sqlite_connect(dbapi_connection, connection_record):
        """Ensure SQLite checks foreign key constraints.
    
        For further details see "Foreign key support" sections on
        https://docs.sqlalchemy.org/en/latest/dialects/sqlite.html#foreign-key-support
        """
        # Enable foreign key constraint checking
        cursor = dbapi_connection.cursor()
>       cursor.execute('PRAGMA foreign_keys=ON')
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) syntax error at or near "PRAGMA"
E       LINE 1: PRAGMA foreign_keys=ON
E               ^
E        (Background on this error at: http://sqlalche.me/e/f405)

invenio_db/shared.py:116: ProgrammingError
=============================== warnings summary ===============================
tests/test_cli.py::test_drop[True]
tests/test_cli.py::test_drop[False]
tests/test_db.py::test_init
tests/test_db.py::test_alembic
tests/test_db.py::test_naming_convention
tests/test_db.py::test_naming_convention
tests/test_db.py::test_naming_convention
tests/test_db.py::test_transaction
tests/test_db.py::test_entry_points
tests/test_db.py::test_local_proxy
tests/test_invenio_db.py::test_init
tests/test_invenio_db.py::test_init
tests/test_invenio_db.py::test_init_db
tests/test_invenio_db.py::test_init_db
tests/test_invenio_db.py::test_init_db
tests/test_shared.py::TestSQLAlchemy::test_apply_driver_hacks
tests/test_shared.py::TestSQLAlchemy::test_set_db_connection_pool
tests/test_utils.py::test_rebuild_encrypted_properties
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_models_registered
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_drop_alembic_version_table
tests/test_versioning.py::test_disabled_versioning
tests/test_versioning.py::test_versioning_without_versioned_tables
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
    'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '

tests/test_db.py::test_naming_convention
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/alembic/util/messaging.py:69: UserWarning: Update master CHECK active manually
    warnings.warn(msg)

tests/test_db.py::test_local_proxy
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_db.py::test_local_proxy
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_versioning_model_classname
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[True]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
tests/test_utils.py::test_create_alembic_version_table[False]
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_invenio_db.py::test_init_db
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/sqlalchemy/ext/declarative/clsregistry.py:128: SAWarning: This declarative base already contains a class with the same class name and module name as sqlalchemy_continuum.model_builder.ParentVersion, and will be replaced in the string-lookup table.
    % (item.__module__, item.__name__)

tests/test_invenio_db.py::test_init_db
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/sqlalchemy/ext/declarative/clsregistry.py:128: SAWarning: This declarative base already contains a class with the same class name and module name as sqlalchemy_continuum.model_builder.SecondParentVersion, and will be replaced in the string-lookup table.
    % (item.__module__, item.__name__)

tests/test_invenio_db.py::test_init_db
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/properties.py:212: SAWarning: On mapper Mapper|ParentVersion|parent_version, primary key column 'parent_version.transaction_id' is being combined with distinct primary key column 'parent_version.transaction_id' in attribute 'transaction_id'. Use explicit properties to give each column its own mapped attribute name.
    % (self.parent, self.columns[1], self.columns[0], self.key)

tests/test_invenio_db.py::test_init_db
  /code/modules/invenio-db/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/properties.py:212: SAWarning: On mapper Mapper|SecondParentVersion|second_parent_version, primary key column 'second_parent_version.transaction_id' is being combined with distinct primary key column 'second_parent_version.transaction_id' in attribute 'transaction_id'. Use explicit properties to give each column its own mapped attribute name.
    % (self.parent, self.columns[1], self.columns[0], self.key)

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                     Stmts   Miss Branch BrPart  Cover
----------------------------------------------------------
invenio_db/__init__.py       6      0      0      0   100%
invenio_db/cli.py           54      4     16      1    93%
invenio_db/config.py         5      0      0      0   100%
invenio_db/ext.py           63      0     24      0   100%
invenio_db/shared.py        44      2      8      0    96%
invenio_db/utils.py         48     24     20      0    53%
invenio_db/version.py        3      0      0      0   100%
----------------------------------------------------------
TOTAL                      223     30     68      1    87%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

=== 4 failed, 18 passed, 3 skipped, 207 warnings, 23 error in 55.28 seconds ====
ERROR: InvocationError for command /code/modules/invenio-db/.tox/c1/bin/pytest --cov=invenio_db tests -v --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/invenio-db/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
