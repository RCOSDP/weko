GLOB sdist-make: /code/modules/weko-workflow/setup.py
c1 create: /code/modules/weko-workflow/.tox/c1
c1 setuptools_version is setuptools==57.5.0
c1 installdeps: pytest>=3, pytest-cov, -rrequirements.txt
c1 inst: /code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.1,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.7,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==8.0.4,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,Flask==1.0.4,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.3.3,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.11.0,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,Flask-OAuthlib==0.9.5,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.1.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,iniconfig==1.1.1,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_iiif&subdirectory=modules/invenio-iiif,invenio-indexer==1.0.2,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_s3&subdirectory=modules/invenio-s3,invenio-search==1.1.0,invenio-search-ui==1.0.0a9,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,kombu==4.6.10,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==3.0.5,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==6.1.2,pytest-cov==4.0.0,pytest-mock==3.6.1,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.12.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,testpath==0.3.1,toml==0.10.2,tomli==1.2.3,tornado==4.5.3,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,validators==0.12.0,vine==1.3.0,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/ayumijin/weko.git@2431cd349ea90ea5face3c0ead8b2d0a640ba933#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,weko-workflow @ file:///code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='3888442798'
c1 run-test: commands[0] | pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-6.1.2, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-workflow/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-workflow
plugins: celery-4.4.7, mock-3.6.1, cov-4.0.0
collecting ... collected 413 items

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_index_acl[0-403] /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl_guest /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl[1-200] /admin/flowsetting/0
/admin/flowsetting/0
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_update_delete /admin/flowsetting/1c3af849-1f6d-438b-958a-b580f565c819
PASSED
tests/test_admin.py::TestFlowSettingView::test_get_specified_properties PASSED
tests/test_admin.py::TestFlowSettingView::test_update_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_new_flow PASSED
tests/test_admin.py::TestFlowSettingView::test_del_flow PASSED
tests/test_admin.py::TestFlowSettingView::test_get_actions FAILED
tests/test_admin.py::TestFlowSettingView::test_upt_flow_action PASSED
tests/test_admin.py::TestFlowSettingView::test__check_auth PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl_guest /admin/workflowsetting/
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl[1-200] /admin/workflowsetting/
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl[1-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl[2-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200] /admin/workflowsetting/0
FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow /admin/workflowsetting/42cd4718-4f0a-4cf9-bf0a-9ac0f02cb936
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl[1-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_name_display_hide PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_displays PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows FAILED
tests/test_api.py::test_Flow_action PASSED
tests/test_api.py::test_Flow_get_flow_action_list PASSED
tests/test_api.py::test_WorkActivity_filter_by_date PASSED
tests/test_api.py::test_WorkActivity_get_all_activity_list FAILED
tests/test_api.py::test_WorkActivity_get_activity_index_search PASSED
tests/test_api.py::test_WorkActivity_upt_activity_detail PASSED
tests/test_api.py::test_WorkActivity_get_corresponding_usage_activities PASSED
tests/test_api.py::test_query_activities_by_tab_is_wait PASSED
tests/test_api.py::test_query_activities_by_tab_is_all PASSED
tests/test_api.py::test_query_activities_by_tab_is_todo PASSED
tests/test_cli.py::test_workflow PASSED
tests/test_cli.py::test_init_workflow_tables FAILED
tests/test_romeo.py::test_search_romeo_jtitles PASSED
tests/test_romeo.py::test_search_romeo_issn PASSED
tests/test_romeo.py::test_search_romeo_jtitle PASSED
tests/test_sessions.py::test_upt_activity_item PASSED
tests/test_tasks.py::test_cancel_expired_usage_report_activities PASSED
tests/test_utils.py::test_get_current_language PASSED
tests/test_utils.py::test_get_term_and_condition_content test data:['this is test data.']
PASSED
tests/test_utils.py::test_get_identifier_setting PASSED
tests/test_utils.py::test_saving_doi_pidstore PASSED
tests/test_utils.py::test_register_hdl PASSED
tests/test_utils.py::test_item_metadata_validation FAILED
tests/test_utils.py::test_merge_doi_error_list PASSED
tests/test_utils.py::test_validation_item_property PASSED
tests/test_utils.py::test_handle_check_required_data PASSED
tests/test_utils.py::test_check_required_data PASSED
tests/test_utils.py::test_get_activity_id_of_record_without_version PASSED
tests/test_utils.py::test_check_suffix_identifier PASSED
tests/test_utils.py::test_get_sub_item_value PASSED
tests/test_utils.py::test_get_item_value_in_deep PASSED
tests/test_utils.py::test_delete_bucket FAILED
tests/test_utils.py::test_merge_buckets_by_records[True] PASSED
tests/test_utils.py::test_merge_buckets_by_records[False] PASSED
tests/test_utils.py::test_merge_buckets_by_records_error PASSED
tests/test_utils.py::test_set_bucket_default_size FAILED
tests/test_utils.py::test_is_show_autofill_metadata PASSED
tests/test_utils.py::test_is_hidden_pubdate PASSED
tests/test_utils.py::test_get_parent_pid_with_type FAILED
tests/test_utils.py::test_filter_all_condition MultiDict([('createdfrom_0', 'createdfrom_0'), ('createdto_0', 'createdto_0'), ('workflow_0', 'workflow_0'), ('user_0', 'user_0'), ('item_0', 'item_0'), ('status_0', 'status_0'), ('tab_0', 'tab_0'), ('sizewait_0', 'sizewait_0'), ('sizetodo_0', 'sizetodo_0'), ('sizeall_0', 'sizeall_0'), ('pagesall_0', 'pagesall_0'), ('pagestodo_0', 'pagestodo_0'), ('pageswait_0', 'pageswait_0'), ('createdfrom_1', 'createdfrom_1'), ('createdto_1', 'createdto_1'), ('workflow_1', 'workflow_1'), ('user_1', 'user_1'), ('item_1', 'item_1'), ('status_1', 'status_1'), ('tab_1', 'tab_1'), ('sizewait_1', 'sizewait_1'), ('sizetodo_1', 'sizetodo_1'), ('sizeall_1', 'sizeall_1'), ('pagesall_1', 'pagesall_1'), ('pagestodo_1', 'pagestodo_1'), ('pageswait_1', 'pageswait_1'), ('dummy_0', 'dummy2')])
PASSED
tests/test_utils.py::test_filter_condition PASSED
tests/test_utils.py::test_get_actionid PASSED
tests/test_utils.py::test_convert_record_to_item_metadata FAILED
tests/test_utils.py::test_prepare_edit_workflow ★★★★★★★convert_record_to_item_metadata ★ deposit★★★★★★
{'_oai': {'id': 'oai:weko3.example.org:00000001', 'sets': ['1']}, 'path': ['1'], 'owner': '1', 'recid': '1', 'title': ['title'], 'pubdate': {'attribute_name': 'PubDate', 'attribute_value': '2022-08-20'}, '_buckets': {'deposit': '3e99cfca-098b-42ed-b8a0-20ddd09b3e02'}, '_deposit': {'id': '1', 'pid': {'type': 'depid', 'value': '1', 'revision_id': 0}, 'owner': '1', 'owners': [1], 'status': 'published', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}}, 'item_title': 'title', 'author_link': [], 'item_type_id': '1', 'publish_date': '2022-08-20', 'publish_status': '0', 'weko_shared_ids': [], 'item_1617186331708': {'attribute_name': 'Title', 'attribute_value_mlt': [{'subitem_1551255647225': 'title', 'subitem_1551255648112': 'ja', 'subitem_stop/continue': 'Continue'}]}, 'item_1617258105262': {'attribute_name': 'Resource Type', 'attribute_value_mlt': [{'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}]}, 'item_1617186819068': {'attribute_name': 'Identifier Registration', 'attribute_value_mlt': [{'subitem_identifier_reg_text': 'test/0000000001', 'subitem_identifier_reg_type': 'JaLC'}]}, 'item_1617605131499': {'attribute_name': 'File', 'attribute_type': 'file', 'attribute_value_mlt': [{'url': {'url': 'https://localhost/record/1/files/test.txt'}, 'date': [{'dateType': 'Available', 'dateValue': '2022-10-03'}], 'format': 'text/tab-separated-values', 'filename': 'check_2022-03-10.tsv', 'filesize': [{'value': '460 B'}], 'accessrole': 'open_access', 'version_id': '29dd361d-dc7f-49bc-b471-bdb5752afef5', 'displaytype': 'detail', 'licensetype': 'license_12', 'is_thumbnail': True}]}, 'item_1664947259584': {'attribute_name': 'サムネイル', 'attribute_value_mlt': [{'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}]}, 'relation_version_is_last': True}
FAILED
tests/test_utils.py::test_handle_finish_workflow FAILED
tests/test_utils.py::test_delete_cache_data PASSED
tests/test_utils.py::test_update_cache_data PASSED
tests/test_utils.py::test_get_cache_data PASSED
tests/test_utils.py::test_check_an_item_is_locked PASSED
tests/test_utils.py::test_get_accoutn_info PASSED
tests/test_utils.py::test_check_existed_doi PASSED
tests/test_utils.py::test_get_url_root PASSED
tests/test_utils.py::test_get_record_by_root_ver PASSED
tests/test_utils.py::test_get_disptype_and_ver_in_metainfo record:{'_oai': {'id': 'oai:weko3.example.org:00000001', 'sets': ['1']}, 'path': ['1'], 'owner': '1', 'recid': '1', 'title': ['title'], 'pubdate': {'attribute_name': 'PubDate', 'attribute_value': '2022-08-20'}, '_buckets': {'deposit': '3e99cfca-098b-42ed-b8a0-20ddd09b3e02'}, '_deposit': {'id': '1', 'pid': {'type': 'depid', 'value': '1', 'revision_id': 0}, 'owner': '1', 'owners': [1], 'status': 'published', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}}, 'item_title': 'title', 'author_link': [], 'item_type_id': '1', 'publish_date': '2022-08-20', 'publish_status': '0', 'weko_shared_ids': [], 'item_1617186331708': {'attribute_name': 'Title', 'attribute_value_mlt': [{'subitem_1551255647225': 'title', 'subitem_1551255648112': 'ja', 'subitem_stop/continue': 'Continue'}]}, 'item_1617258105262': {'attribute_name': 'Resource Type', 'attribute_value_mlt': [{'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}]}, 'item_1617186819068': {'attribute_name': 'Identifier Registration', 'attribute_value_mlt': [{'subitem_identifier_reg_text': 'test/0000000001', 'subitem_identifier_reg_type': 'JaLC'}]}, 'item_1617605131499': {'attribute_name': 'File', 'attribute_type': 'file', 'attribute_value_mlt': [{'url': {'url': 'https://localhost/record/1/files/test.txt'}, 'date': [{'dateType': 'Available', 'dateValue': '2022-10-03'}], 'format': 'text/tab-separated-values', 'filename': 'check_2022-03-10.tsv', 'filesize': [{'value': '460 B'}], 'accessrole': 'open_access', 'version_id': '29dd361d-dc7f-49bc-b471-bdb5752afef5', 'displaytype': 'detail', 'licensetype': 'license_12', 'is_thumbnail': True}]}, 'item_1664947259584': {'attribute_name': 'サムネイル', 'attribute_value_mlt': [{'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}]}, 'relation_version_is_last': True}
result:{'29dd361d-dc7f-49bc-b471-bdb5752afef5': {'displaytype': 'detail', 'licensetype': 'license_12'}}
file:{'url': {'url': 'https://localhost/record/1/files/test.txt'}, 'date': [{'dateType': 'Available', 'dateValue': '2022-10-03'}], 'format': 'text/tab-separated-values', 'filename': 'check_2022-03-10.tsv', 'filesize': [{'value': '460 B'}], 'accessrole': 'open_access', 'version_id': '29dd361d-dc7f-49bc-b471-bdb5752afef5', 'displaytype': 'detail', 'licensetype': 'license_12', 'is_thumbnail': True}
PASSED
tests/test_utils.py::test_set_files_display_type PASSED
tests/test_utils.py::test_get_thumbnails PASSED
tests/test_utils.py::test_get_allow_multi_thumbnail result:False
PASSED
tests/test_utils.py::test_is_usage_application_item_type PASSED
tests/test_utils.py::test_is_usage_application PASSED
tests/test_utils.py::test_send_mail_reminder FAILED
tests/test_utils.py::test_send_mail_approval_done PASSED
tests/test_utils.py::test_send_mail_request_approval PASSED
tests/test_utils.py::test_send_mail PASSED
tests/test_utils.py::test_email_pattern_request_approval PASSED
tests/test_utils.py::test_email_pattern_approval_done PASSED
tests/test_utils.py::test_get_mail_data FAILED
tests/test_utils.py::test_get_subject_and_content PASSED
tests/test_utils.py::test_get_file_path PASSED
tests/test_utils.py::test_replace_characters FAILED
tests/test_utils.py::test_register_info PASSED
tests/test_utils.py::test_get_approval_dates PASSED
tests/test_utils.py::test_get_item_info reslt:{'type': 'depid', 'value': '1', 'revision_id': 0, 'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': '', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper', 'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}
FAILED
tests/test_utils.py::test_get_site_info_name PASSED
tests/test_utils.py::test_get_default_mail_sender PASSED
tests/test_utils.py::test_set_mail_info FAILED
tests/test_utils.py::test_process_send_reminder_mail FAILED
tests/test_utils.py::test_process_send_reminder_mail_1 PASSED
tests/test_utils.py::test_process_send_notification_mail FAILED
tests/test_utils.py::test_get_application_and_approval_date PASSED
tests/test_utils.py::test_get_workflow_item_type_names PASSED
tests/test_utils.py::test_create_usage_report PASSED
tests/test_utils.py::test_create_record_metadata PASSED
tests/test_utils.py::test_modify_item_metadata PASSED
tests/test_utils.py::test_replace_title_subitem PASSED
tests/test_utils.py::test_get_schema_dict PASSED
tests/test_utils.py::test_create_deposit ******* weko-workflow create_deposit call ******
PASSED
tests/test_utils.py::test_update_activity_action PASSED
tests/test_utils.py::test_check_continue PASSED
tests/test_utils.py::test_autofill_title PASSED
tests/test_utils.py::test_exclude_admin_workflow PASSED
tests/test_utils.py::test_is_enable_item_name_link PASSED
tests/test_utils.py::test_save_activity_data PASSED
tests/test_utils.py::test_save_activity_data_1 FAILED
tests/test_utils.py::test_save_activity_data_2 PASSED
tests/test_utils.py::test_send_mail_url_guest_user PASSED
tests/test_utils.py::test_generate_guest_activity_token_value PASSED
tests/test_utils.py::test_init_activity_for_guest_user PASSED
tests/test_utils.py::test_send_usage_application_mail_for_guest_user FAILED
tests/test_utils.py::test_validate_guest_activity_token PASSED
tests/test_utils.py::test_validate_guest_activity_expired PASSED
tests/test_utils.py::test_create_onetime_download_url_to_guest PASSED
tests/test_utils.py::test_delete_guest_activity PASSED
tests/test_utils.py::test_get_activity_display_info FAILED
tests/test_utils.py::test___init_activity_detail_data_for_guest FAILED
tests/test_utils.py::test_prepare_data_for_guest_activity PASSED
tests/test_utils.py::test_recursive_get_specified_properties PASSED
tests/test_utils.py::test_get_approval_keys result:['parentkey.subitem_restricted_access_guarantor_mail_address']
PASSED
tests/test_utils.py::test_process_send_mail PASSED
tests/test_utils.py::test_cancel_expired_usage_reports PASSED
tests/test_utils.py::test_process_send_approval_mails FAILED
tests/test_utils.py::test_get_usage_data FAILED
tests/test_utils.py::test_update_approval_date PASSED
tests/test_utils.py::test_create_record_metadata_for_user PASSED
tests/test_utils.py::test_get_current_date PASSED
tests/test_utils.py::test_get_sub_key_by_system_property_key PASSED
tests/test_utils.py::test_update_system_data_for_item_metadata PASSED
tests/test_utils.py::test_update_approval_date_for_deposit PASSED
tests/test_utils.py::test_update_system_data_for_activity FAILED
tests/test_utils.py::test_get_record_first_version PASSED
tests/test_utils.py::test_get_index_id FAILED
tests/test_utils.py::test_is_terms_of_use_only PASSED
tests/test_utils.py::test_grant_access_rights_to_all_open_restricted_files PASSED
tests/test_utils.py::test_get_contributors ERROR
tests/test_views.py::test_index_acl_nologin /workflow/
PASSED
tests/test_views.py::test_index_acl[0-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[1-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[2-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[3-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[4-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[5-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[6-200] /workflow/
PASSED
tests/test_views.py::test_iframe_success /workflow/iframe/success
FAILED
tests/test_views.py::test_init_activity_acl_nologin /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[0-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[1-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[2-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[3-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[4-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[5-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[6-200] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity[0-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[1-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[2-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[3-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[4-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[5-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[6-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_is_terms_of_use_only /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_guest_nologin /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[0-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_init_activity_guest_users[1-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_init_activity_guest_users[2-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_init_activity_guest_users[3-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_init_activity_guest_users[4-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_init_activity_guest_users[5-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_init_activity_guest_users[6-200] /workflow/activity/init-guest
FAILED
tests/test_views.py::test_find_doi_nologin /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[0-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[1-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[2-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[3-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[4-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[5-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[6-200] /workflow/findDOI
PASSED
tests/test_views.py::test_save_feedback_maillist_users[0-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[1-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[2-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[3-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[4-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[5-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[6-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_previous_action_acl_nologin /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[0-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action_acl_users[1-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action_acl_users[2-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action_acl_users[3-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action_acl_users[4-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action_acl_users[5-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action_acl_users[6-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[0-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[1-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[2-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[3-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[4-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[5-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[6-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_next_action_acl_nologin /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[0-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[1-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[2-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[3-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[4-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[5-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[6-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_guestlogin /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action[0-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[1-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[2-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[3-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[4-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[5-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[6-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action_usage_application[0-200] /workflow/activity/action/A-00000001-20001/3
FAILED
tests/test_views.py::test_cancel_action_acl_nologin /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[0-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[1-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[2-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[3-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[4-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[5-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[6-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_guestlogin /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[0-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[1-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[2-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[3-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[4-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[5-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[6-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[0-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[1-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[2-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[3-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[4-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[5-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action2[6-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_guest /workflow/activity/action/99/1/cancel
PASSED
tests/test_views.py::test_send_mail_nologin /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[0-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_send_mail_users[1-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_send_mail_users[2-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_send_mail_users[3-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_send_mail_users[4-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_send_mail_users[5-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_send_mail_users[6-200] /workflow/send_mail/1/a
FAILED
tests/test_views.py::test_lock_activity_nologin /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[0-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[1-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[2-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[3-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[4-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[5-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[6-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity[0-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[1-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[2-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[3-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[4-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[5-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[6-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_unlock_activity_acl_nologin /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[0-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[1-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[2-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[3-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[4-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[5-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[6-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[0-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[1-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[2-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[3-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[4-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[5-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[6-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_check_approval_acl_nologin /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[0-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[1-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[2-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[3-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[4-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[5-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[6-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[0-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[1-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[2-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[3-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[4-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[5-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[6-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_nologin /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[0-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[1-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[2-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[3-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[4-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[5-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[6-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist[0-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[1-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[2-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[3-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[4-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[5-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[6-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_save_activity_acl_nologin /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[0-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[1-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[2-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[3-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[4-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[5-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[6-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_guestlogin /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[0-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity[1-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity[2-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity[3-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity[4-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity[5-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity[6-200] /workflow/save_activity_data
FAILED
tests/test_views.py::test_save_activity_guestlogin /workflow/save_activity_data
FAILED
tests/test_views.py::test_display_activity_nologin /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_guestlogin /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[0-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[1-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[2-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[3-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[4-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[5-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity_users[6-200] /workflow/activity/detail/1
FAILED
tests/test_views.py::test_display_activity[0-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[1-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[2-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[3-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[4-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[5-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[6-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity_1 /workflow/activity/detail/A-00000001-00005
FAILED
tests/test_views.py::test_withdraw_confirm_nologin /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[0-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[1-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[2-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[3-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[4-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[5-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[6-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_guestlogin /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[0] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[1] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[2] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[3] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[4] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[5] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[6] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1_guestlogin /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[0-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[1-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[2-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[3-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[4-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[5-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[6-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete_guestlogin[success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_check_authority_action FAILED

==================================== ERRORS ====================================
___________________ ERROR at setup of test_get_contributors ____________________

cls = <class 'invenio_pidstore.models.PersistentIdentifier'>, pid_type = 'recid'
pid_value = 196, pid_provider = None

    @classmethod
    def get(cls, pid_type, pid_value, pid_provider=None):
        """Get persistent identifier.
    
        :param pid_type: Persistent identifier type.
        :param pid_value: Persistent identifier value.
        :param pid_provider: Persistent identifier provider. (default: None).
        :raises: :exc:`invenio_pidstore.errors.PIDDoesNotExistError` if no
            PID is found.
        :returns: A :class:`invenio_pidstore.models.PersistentIdentifier`
            instance.
        """
        try:
            args = dict(pid_type=pid_type, pid_value=six.text_type(pid_value))
            if pid_provider:
                args['pid_provider'] = pid_provider
>           return cls.query.filter_by(**args).one()

.tox/c1/lib/python3.6/site-packages/invenio_pidstore/models.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <flask_sqlalchemy.BaseQuery object at 0x7fc9b01ac2b0>

    def one(self):
        """Return exactly one result or raise an exception.
    
        Raises ``sqlalchemy.orm.exc.NoResultFound`` if the query selects
        no rows.  Raises ``sqlalchemy.orm.exc.MultipleResultsFound``
        if multiple object identities are returned, or if multiple
        rows are returned for a query that returns only scalar values
        as opposed to full identity-mapped entities.
    
        Calling :meth:`.one` results in an execution of the underlying query.
    
        .. seealso::
    
            :meth:`.Query.first`
    
            :meth:`.Query.one_or_none`
    
        """
        try:
            ret = self.one_or_none()
        except orm_exc.MultipleResultsFound:
            raise orm_exc.MultipleResultsFound(
                "Multiple rows were found for one()"
            )
        else:
            if ret is None:
>               raise orm_exc.NoResultFound("No row was found for one()")
E               sqlalchemy.orm.exc.NoResultFound: No row was found for one()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3046: NoResultFound

During handling of the above exception, another exception occurred:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
location = local

    @pytest.fixture()
    def db_records_1(db, location):
        record_data = json_data("data/test_records_1.json")
        item_data = json_data("data/test_items_1.json")
        record_num = len(record_data)
        result = []
        for d in range(record_num):
>           result.append(create_record(record_data[d], item_data[d]))

tests/conftest.py:1576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/helpers.py:101: in create_record
    parent = PersistentIdentifier.get("recid",int(float(record_data["recid"])))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'invenio_pidstore.models.PersistentIdentifier'>, pid_type = 'recid'
pid_value = 196, pid_provider = None

    @classmethod
    def get(cls, pid_type, pid_value, pid_provider=None):
        """Get persistent identifier.
    
        :param pid_type: Persistent identifier type.
        :param pid_value: Persistent identifier value.
        :param pid_provider: Persistent identifier provider. (default: None).
        :raises: :exc:`invenio_pidstore.errors.PIDDoesNotExistError` if no
            PID is found.
        :returns: A :class:`invenio_pidstore.models.PersistentIdentifier`
            instance.
        """
        try:
            args = dict(pid_type=pid_type, pid_value=six.text_type(pid_value))
            if pid_provider:
                args['pid_provider'] = pid_provider
            return cls.query.filter_by(**args).one()
        except NoResultFound:
>           raise PIDDoesNotExistError(pid_type, pid_value)
E           invenio_pidstore.errors.PIDDoesNotExistError

.tox/c1/lib/python3.6/site-packages/invenio_pidstore/models.py:196: PIDDoesNotExistError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
=================================== FAILURES ===================================
_____________________ TestFlowSettingView.test_update_flow _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7fc9c35c49b0>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_update_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.update_flow(0)==""

tests/test_admin.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/admin.py:131: in update_flow
    workflow.upt_flow(flow_id, post_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <weko_workflow.api.Flow object at 0x7fc9c4178f28>, flow_id = 0
flow = None

    def upt_flow(self, flow_id, flow):
        """Update flow info.
    
        :param flow_id:
        :param flow:
        :return:
        """
        try:
>           flow_name = flow.get('flow_name')
E           AttributeError: 'NoneType' object has no attribute 'get'

weko_workflow/api.py:118: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:api.py:141 'NoneType' object has no attribute 'get'
Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 118, in upt_flow
    flow_name = flow.get('flow_name')
AttributeError: 'NoneType' object has no attribute 'get'
_____________________ TestFlowSettingView.test_get_actions _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7fc9c2bc9e48>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_get_actions(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.get_actions()==""
E           AssertionError: assert [<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>] == ''
E             +[<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>]
E             -''

tests/test_admin.py:146: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________ TestWorkFlowSettingView.test_update_workflow_acl[1-200] ____________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7fc9c25cecf8>
client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_update_workflow_acl(self,client,db_register2,users,users_index,status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('workflowsetting.update_workflow',workflow_id='0',_external=True)
        with patch("flask.templating._render", return_value=""):
>           res =  client.post(url)

tests/test_admin.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_admin.views.protected_adminview_factory.<locals>.ProtectedAdminView object at 0x7fc9c3aef7f0>
workflow_id = '0'

    @expose('/<string:workflow_id>', methods=['POST', 'PUT'])
    def update_workflow(self, workflow_id='0'):
        """Update workflow info.
    
        :return:
        """
        json_data = request.get_json()
>       list_hide = json_data.get('list_hide', [])
E       AttributeError: 'NoneType' object has no attribute 'get'

weko_workflow/admin.py:372: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________ TestWorkFlowSettingView.test_save_workflow_role ________________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7fc9c028b978>
app = <Flask 'testapp'>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_save_workflow_role(self,app,users,workflow):
        role0 = (users[0]['obj']).roles[0]
        role1 = (users[1]['obj']).roles[0]
        role2 = (users[2]['obj']).roles[0]
        role3 = (users[3]['obj']).roles[0]
        role4 = (users[4]['obj']).roles[0]
    
        wf = workflow['workflow']
    
        with app.test_request_context():
>           assert WorkFlowSettingView.save_workflow_role(wf.id,[role0.id,role1.id,role2.id,role3.id,role4.id])
E           AssertionError: assert None
E            +  where None = <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>>(1, [])
E            +    where <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>> = WorkFlowSettingView.save_workflow_role
E            +    and   1 = <WorkFlow 1>.id

tests/test_admin.py:385: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:admin.py:481 wf_id:1
ERROR    flask.app:admin.py:483 list_hide:[3, 2, 1, 4, 5]
_____________ TestWorkFlowSettingView.test_get_language_workflows ______________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7fc9bfba4780>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_get_language_workflows(self,users):
>       with self.test_request_context():
E       AttributeError: 'TestWorkFlowSettingView' object has no attribute 'test_request_context'

tests/test_admin.py:390: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________________ test_WorkActivity_get_all_activity_list ____________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_WorkActivity_get_all_activity_list(app, client, users, db_register):
        with app.test_request_context():
            login_user(users[2]["obj"])
            activity = WorkActivity()
            activities = activity.get_all_activity_list()
>           assert len(activities) == 13
E           assert 15 == 13
E             +15
E             -13

tests/test_api.py:111: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_init_workflow_tables ___________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_init_workflow_tables(app,db,users):
        runner = app.test_cli_runner()
        result = runner.invoke(init_workflow_tables,["Action,action_status"])
        assert result.output ==  'workflow db has been initialised.\n'
        assert result.exit_code == 0
    
        result = runner.invoke(init_workflow_tables,["gakuninrdm_data"])
>       assert result.output == ""
E       assert ("(sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO "\n 'workflow_workflow (status, created, updated, id, flows_id, flows_name, '\n 'itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (?, '\n "?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 "\n "17:00:49.224563', '2023-07-12 17:00:49.224571', -1, <memory at "\n "0x7fc9c4a8ef48>, 'GRDM_デフォルトワークフロー', 15, -1, 0, 0, 1)] (Background on this "\n 'error at: http://sqlalche.me/e/gkpj)\n'\n 'workflow db init failed.\n') == ''
E         + (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_workflow (status, created, updated, id, flows_id, flows_name, itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:00:49.224563', '2023-07-12 17:00:49.224571', -1, <memory at 0x7fc9c4a8ef48>, 'GRDM_デフォルトワークフロー', 15, -1, 0, 0, 1)] (Background on this error at: http://sqlalche.me/e/gkpj)
E         + workflow db init failed.

tests/test_cli.py:27: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_item_metadata_validation _________________________

self = <sqlalchemy.engine.base.Connection object at 0x7fc9bf4a6978>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fc9bf7cfb70>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fc9be6620b8>
parameters = [immutabledict({})]
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fc9be6620b8>, [immutabledict({})])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fc9bf85e898>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(dialect, self, conn, *args)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fc9bf7cfb70>
connection = <sqlalchemy.engine.base.Connection object at 0x7fc9bf4a6978>
dbapi_connection = <sqlalchemy.pool._ConnectionFairy object at 0x7fc9bf85e898>
compiled = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fc9be6620b8>
parameters = []

    @classmethod
    def _init_compiled(
        cls, dialect, connection, dbapi_connection, compiled, parameters
    ):
        """Initialize execution context for a Compiled construct."""
    
        self = cls.__new__(cls)
        self.root_connection = connection
        self._dbapi_connection = dbapi_connection
        self.dialect = connection.dialect
    
        self.compiled = compiled
    
        # this should be caught in the engine before
        # we get here
        assert compiled.can_execute
    
        self.execution_options = compiled.execution_options.union(
            connection._execution_options
        )
    
        self.result_column_struct = (
            compiled._result_columns,
            compiled._ordered_columns,
            compiled._textual_ordered_columns,
        )
    
        self.unicode_statement = util.text_type(compiled)
        if not dialect.supports_unicode_statements:
            self.statement = self.unicode_statement.encode(
                self.dialect.encoding
            )
        else:
            self.statement = self.unicode_statement
    
        self.isinsert = compiled.isinsert
        self.isupdate = compiled.isupdate
        self.isdelete = compiled.isdelete
        self.is_text = compiled.isplaintext
    
        if not parameters:
            self.compiled_parameters = [compiled.construct_params()]
        else:
            self.compiled_parameters = [
                compiled.construct_params(m, _group_number=grp)
                for grp, m in enumerate(parameters)
            ]
    
            self.executemany = len(parameters) > 1
    
        self.cursor = self.create_cursor()
    
        if self.isinsert or self.isupdate or self.isdelete:
            self.is_crud = True
            self._is_explicit_returning = bool(compiled.statement._returning)
            self._is_implicit_returning = bool(
                compiled.returning and not compiled.statement._returning
            )
    
        if self.compiled.insert_prefetch or self.compiled.update_prefetch:
            if self.executemany:
                self._process_executemany_defaults()
            else:
                self._process_executesingle_defaults()
    
        processors = compiled._bind_processors
    
        if compiled.contains_expanding_parameters:
            positiontup = self._expand_in_parameters(compiled, processors)
        elif compiled.positional:
            positiontup = self.compiled.positiontup
    
        # Convert the dictionary of bind parameter values
        # into a dict or list to be sent to the DBAPI's
        # execute() or executemany() method.
        parameters = []
        if compiled.positional:
            for compiled_params in self.compiled_parameters:
                param = []
                for key in positiontup:
                    if key in processors:
>                       param.append(processors[key](compiled_params[key]))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = 1

    def process(value):
>       return impl_processor(process_param(value, dialect))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/type_api.py:1189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = UUIDType(length=16), value = 1
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fc9bf7cfb70>

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
    
        if not isinstance(value, uuid.UUID):
>           value = self._coerce(value)

.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = 1

    @staticmethod
    def _coerce(value):
        if value and not isinstance(value, uuid.UUID):
            try:
>               value = uuid.UUID(value)

.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'UUID' object has no attribute 'int'",) raised in repr()] UUID object at 0x7fc9be4c4748>
hex = 1, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
E           AttributeError: 'int' object has no attribute 'replace'

/usr/local/lib/python3.6/uuid.py:137: AttributeError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:33c7d2e7-fe57-407c-8fac-99bf930aa7d7 (R)>, <PersistentIdentifier depid:1 / rec:3...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:72bb8456-3a6e-4a99-8311-a7874c82f473 (R)>, None, ...), ...]

    def test_item_metadata_validation(db_records):
        recid, depid, record, item, parent, doi, deposit = db_records[0]
>       result = item_metadata_validation(recid.id,"hdl")

tests/test_utils.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:358: in item_metadata_validation
    item_id) if item_id else MappingData(record=record)
weko_workflow/utils.py:819: in __init__
    self.record = WekoRecord.get_record(item_id) if item_id else record
../invenio-records/invenio_records/api.py:206: in get_record
    obj = query.one()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3039: in one
    ret = self.one_or_none()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3008: in one_or_none
    ret = list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3081: in __iter__
    return self._execute_and_instances(context)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3106: in _execute_and_instances
    result = conn.execute(querycontext.statement, self._params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1174: in _execute_context
    e, util.text_type(statement), parameters, None, None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: in _execute_context
    context = constructor(dialect, self, conn, *args)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: in _init_compiled
    param.append(processors[key](compiled_params[key]))
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/type_api.py:1189: in process
    return impl_processor(process_param(value, dialect))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:68: in process_bind_param
    value = self._coerce(value)
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:56: in _coerce
    value = uuid.UUID(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'UUID' object has no attribute 'int'",) raised in repr()] UUID object at 0x7fc9be4c4748>
hex = 1, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
E           sqlalchemy.exc.StatementError: (builtins.AttributeError) 'int' object has no attribute 'replace' [SQL: 'SELECT records_metadata.created AS records_metadata_created, records_metadata.updated AS records_metadata_updated, records_metadata.id AS records_metadata_id, records_metadata.json AS records_metadata_json, records_metadata.version_id AS records_metadata_version_id \nFROM records_metadata \nWHERE records_metadata.id = ? AND records_metadata.json IS NOT NULL'] [parameters: [{}]]

/usr/local/lib/python3.6/uuid.py:137: StatementError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_delete_bucket ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x7fc9bc3926d8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fc9bcaab1d0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7fc9bcad2f48>,)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fc9bc37cb38>, [{}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fc9bc392320>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fc9bc37c208>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fc9bcaab1d0>
cursor = <sqlite3.Cursor object at 0x7fc9bc16db90>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7fc9bcad2f48>,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fc9bc37c208>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: FOREIGN KEY constraint failed

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:bbe1e353-0ad9-4736-b5e1-0198e03ec34c (R)>, <PersistentIdentifier depid:1 / rec:b...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:7079b97a-8b1d-4a58-9833-5c76074ff636 (R)>, None, ...), ...]
add_file = <function add_file.<locals>.factory at 0x7fc9bc46d950>

    def test_delete_bucket(db_records, add_file):
        bucket,_ = add_file(db_records[2][2])
        bucket_id = bucket.id
>       delete_bucket(bucket_id)

tests/test_utils.py:452: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1159: in delete_bucket
    bucket.remove()
../invenio-files-rest/invenio_files_rest/models.py:151: in inner
    return f(self, *args, **kwargs)
../invenio-files-rest/invenio_files_rest/models.py:584: in remove
    self.query.filter_by(id=self.id).delete()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3440: in delete
    delete_op.exec_()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1636: in exec_
    self._do_exec()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1866: in _do_exec
    self._execute_stmt(delete_stmt)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1642: in _execute_stmt
    stmt, params=self.query._params, mapper=self.mapper
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1263: in execute
    clause, params or {}
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fc9bcaab1d0>
cursor = <sqlite3.Cursor object at 0x7fc9bc16db90>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7fc9bcad2f48>,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fc9bc37c208>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'DELETE FROM files_bucket WHERE files_bucket.id = ?'] [parameters: (<memory at 0x7fc9bcad2f48>,)] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_set_bucket_default_size _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:e0c9966a-0769-47f2-a14a-d62834c6a3ff (R)>, <PersistentIdentifier depid:1 / rec:e...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:9d00023a-7835-4fa5-9113-6ecd34465757 (R)>, None, ...), ...]
add_file = <function add_file.<locals>.factory at 0x7fc9bb7a4f28>

    def test_set_bucket_default_size(db_records, add_file):
        bucket_10, rbucket_10 = add_file(db_records[2][2])
>       set_bucket_default_size(rbucket_10.id)
E       AttributeError: 'RecordsBuckets' object has no attribute 'id'

tests/test_utils.py:484: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_get_parent_pid_with_type _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:fbfd4447-841c-4581-b15d-16ed6d7bf757 (R)>, <PersistentIdentifier depid:1 / rec:f...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:2cbcea6e-82f3-4c62-9582-10f0bc2b4b6b (R)>, None, ...), ...]

    def test_get_parent_pid_with_type(db_records):
        result = get_parent_pid_with_type("doi",db_records[0][2].id)
        assert result == db_records[0][5]
    
>       result = get_parent_pid_with_type("hdl",db_records[4][2].id)

tests/test_utils.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

pid_type = 'hdl', object_uuid = UUID('6738eed4-1bbc-47a0-b289-64e99e5f82f0')

    def get_parent_pid_with_type(pid_type, object_uuid):
        """Get Persistent Identifier Object by pid_value or item_uuid.
    
        Arguments:
            pid_type     -- {string} 'doi' (default) or 'hdl'
            object_uuid  -- {uuid} assigned object's uuid
    
        Returns:
            pid_object   -- PID object or None
    
        """
        try:
            record = WekoRecord.get_record(object_uuid)
            with db.session.no_autoflush:
                pid_object = PersistentIdentifier.query.filter_by(
                    pid_type=pid_type,
>                   object_uuid=record.pid_parent.object_uuid
                ).order_by(PersistentIdentifier.created.desc()).first()
E               AttributeError: 'NoneType' object has no attribute 'object_uuid'

weko_workflow/utils.py:1314: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ test_convert_record_to_item_metadata _____________________

db_records = [(<PersistentIdentifier recid:1 / rec:f8bf8a45-d62a-4041-9837-b001761e2dbd (R)>, <PersistentIdentifier depid:1 / rec:f...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:7b505b8c-481b-4829-affd-d613f13e2785 (R)>, None, ...), ...]
item_type = <ItemType 1>

    def test_convert_record_to_item_metadata(db_records,item_type):
        record = WekoRecord.get_record(db_records[0][2].id)
>       result = convert_record_to_item_metadata(record)

tests/test_utils.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

record_metadata = {'_oai': {'id': 'oai:weko3.example.org:00000001', 'sets': ['1']}, 'path': ['1'], 'owner': '1', 'recid': '1', 'title': ...?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}]}, 'relation_version_is_last': True}

    def convert_record_to_item_metadata(record_metadata):
        """Convert record_metadata to item_metadata."""
        item_metadata = {
            'id': record_metadata['recid'],
            'pid': record_metadata['_deposit']['pid'],
            '$schema': record_metadata['item_type_id'],
            'pubdate': record_metadata['publish_date'],
            'title': record_metadata['item_title'],
            'owner': record_metadata['owner'],
>           'owners': record_metadata['owners'],
            'shared_user_ids': record_metadata['weko_shared_ids']
        }
E       KeyError: 'owners'

weko_workflow/utils.py:1380: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_prepare_edit_workflow __________________________

app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<PersistentIdentifier recid:1 / rec:dc381bc4-0a91-4b96-a6e0-c93f84ff3d31 (R)>, <PersistentIdentifier depid:1 / rec:d...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:49269341-732c-4428-bd38-632523513a09 (R)>, None, ...), ...]
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9ba4ee080>

    def test_prepare_edit_workflow(app, workflow, db_records,users,mocker):
        #login(client=client, email=users[2]["email"])
        with app.test_request_context():
            login_user(users[2]["obj"])
            mocker.patch("weko_workflow.utils.WekoDeposit.update")
            mocker.patch("weko_workflow.utils.WekoDeposit.commit")
            data = {
                "flow_id":workflow["flow"].id,
                "workflow_id":workflow["workflow"].id,
                "community":1,
                "itemtype_id":1,
                "activity_login_user":1,
                "activity_update_user":1
            }
            recid = db_records[0][0]
            deposit = db_records[0][6]
>           result = prepare_edit_workflow(data,recid,deposit)

tests/test_utils.py:629: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1464: in prepare_edit_workflow
    _metadata = convert_record_to_item_metadata(deposit)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

record_metadata = {'_oai': {'id': 'oai:weko3.example.org:00000001', 'sets': ['1']}, 'path': ['1'], 'owner': '1', 'recid': '1', 'title': ...?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}]}, 'relation_version_is_last': True}

    def convert_record_to_item_metadata(record_metadata):
        """Convert record_metadata to item_metadata."""
        item_metadata = {
            'id': record_metadata['recid'],
            'pid': record_metadata['_deposit']['pid'],
            '$schema': record_metadata['item_type_id'],
            'pubdate': record_metadata['publish_date'],
            'title': record_metadata['item_title'],
            'owner': record_metadata['owner'],
>           'owners': record_metadata['owners'],
            'shared_user_ids': record_metadata['weko_shared_ids']
        }
E       KeyError: 'owners'

weko_workflow/utils.py:1380: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_handle_finish_workflow __________________________

workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<PersistentIdentifier recid:1 / rec:3bed83c1-9976-4b2c-9266-b851ba73577f (R)>, <PersistentIdentifier depid:1 / rec:3...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:89817322-9bc3-4bdb-9b6e-56a063092478 (R)>, None, ...), ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9baa8ccc0>

    def test_handle_finish_workflow(workflow, db_records, mocker):
        result = handle_finish_workflow(None, None, None)
        assert result == None
        mocker.patch("weko_deposit.api.WekoDeposit.publish")
        mocker.patch("weko_deposit.api.WekoDeposit.commit")
>       mocker.patch("weko_workflow.utils.update_records_sets.delay")

tests/test_utils.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:384: in __call__
    **kwargs
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:183: in _start_patch
    mocked = p.start()  # type: unittest.mock.MagicMock
/usr/local/lib/python3.6/unittest/mock.py:1378: in start
    result = self.__enter__()
/usr/local/lib/python3.6/unittest/mock.py:1231: in __enter__
    self.target = self.getter()
/usr/local/lib/python3.6/unittest/mock.py:1401: in <lambda>
    getter = lambda: _importer(target)
/usr/local/lib/python3.6/unittest/mock.py:1088: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'weko_workflow.utils' from '/code/modules/weko-workflow/weko_workflow/utils.py'>
comp = 'update_records_sets'
import_path = 'weko_workflow.utils.update_records_sets'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'weko_workflow.utils.update_records_sets'; 'weko_workflow.utils' is not a package

/usr/local/lib/python3.6/unittest/mock.py:1077: ModuleNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________________________ test_send_mail_reminder ____________________________

client = <FlaskClient <Flask 'testapp'>>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b85855f8>

    def test_send_mail_reminder(client,mocker):
        # nomal
        mocker.patch("weko_workflow.utils.replace_characters",return_value="mail body")
        with patch("weko_workflow.utils.get_mail_data",return_value=(None,"body")):
            with patch("weko_workflow.utils.send_mail",return_value=True):
>               send_mail_reminder({})

tests/test_utils.py:854: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mail_info = {}

    def send_mail_reminder(mail_info):
        """Send mail reminder.
    
        :mail_info: object
        """
>       subject, body = (mail_info.get('mail_id'))
E       TypeError: 'NoneType' object is not iterable

weko_workflow/utils.py:1876: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_mail_data ______________________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7fc9ccfbfb70>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 140504818571072

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

cls = <class 'invenio_mail.models.MailTemplates'>, id = 'test_file'

    @classmethod
    def get_by_id(cls, id):
        """Get mail template by id."""
        try:
>           return cls.query.filter_by(id=id).one_or_none()

../invenio-mail/invenio_mail/models.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <flask_sqlalchemy._QueryProperty object at 0x7fc9ccfbfbe0>, obj = None
type = <class 'invenio_mail.models.MailTemplates'>

    def __get__(self, obj, type):
        try:
            mapper = orm.class_mapper(type)
            if mapper:
>               return type.query_class(mapper, session=self.sa.session())

.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:514: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.scoping.scoped_session object at 0x7fc9ccfbfb38>, kw = {}

    def __call__(self, **kw):
        r"""Return the current :class:`.Session`, creating it
        using the :attr:`.scoped_session.session_factory` if not present.
    
        :param \**kw: Keyword arguments will be passed to the
         :attr:`.scoped_session.session_factory` callable, if an existing
         :class:`.Session` is not present.  If the :class:`.Session` is present
         and keyword arguments have been passed,
         :exc:`~sqlalchemy.exc.InvalidRequestError` is raised.
    
        """
        if kw:
            if self.registry.has():
                raise sa_exc.InvalidRequestError(
                    "Scoped session is already present; "
                    "no new arguments may be specified."
                )
            else:
                sess = self.session_factory(**kw)
                self.registry.set(sess)
                return sess
        else:
>           return self.registry()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7fc9ccfbfb70>

    def __call__(self):
        key = self.scopefunc()
        try:
            return self.registry[key]
        except KeyError:
>           return self.registry.setdefault(key, self.createfunc())

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = sessionmaker(class_='SignallingSession', db=<SQLAlchemy engine=None>, query_cls=<class 'flask_sqlalchemy.BaseQuery'>, bind=None, autoflush=True, autocommit=False, expire_on_commit=True)
local_kw = {'autocommit': False, 'autoflush': True, 'bind': None, 'db': <SQLAlchemy engine=None>, ...}
k = 'expire_on_commit', v = True

    def __call__(self, **local_kw):
        """Produce a new :class:`.Session` object using the configuration
        established in this :class:`.sessionmaker`.
    
        In Python, the ``__call__`` method is invoked on an object when
        it is "called" in the same way as a function::
    
            Session = sessionmaker()
            session = Session()  # invokes sessionmaker.__call__()
    
        """
        for k, v in self.kw.items():
            if k == "info" and "info" in local_kw:
                d = v.copy()
                d.update(local_kw["info"])
                local_kw["info"] = d
            else:
                local_kw.setdefault(k, v)
>       return self.class_(**local_kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7fc9b8837908>
db = <SQLAlchemy engine=None>, autocommit = False, autoflush = True
options = {'bind': None, 'expire_on_commit': True, 'query_cls': <class 'flask_sqlalchemy.BaseQuery'>}

    def __init__(self, db, autocommit=False, autoflush=True, **options):
        #: The application that this session belongs to.
>       self.app = app = db.get_app()

.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b89f9780>

    def test_get_mail_data(mocker):
        mocker.patch("weko_workflow.utils.get_file_path")
        mocker.patch("weko_workflow.utils.get_subject_and_content")
>       get_mail_data("test_file")

tests/test_utils.py:1075: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1992: in get_mail_data
    mt = MailTemplates.get_by_id(mail_id)
../invenio-mail/invenio_mail/models.py:98: in get_by_id
    current_app.logger.error(ex)
.tox/c1/lib/python3.6/site-packages/werkzeug/local.py:348: in __getattr__
    return getattr(self._get_current_object(), name)
.tox/c1/lib/python3.6/site-packages/werkzeug/local.py:307: in _get_current_object
    return self.__local()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _find_app():
        top = _app_ctx_stack.top
        if top is None:
>           raise RuntimeError(_app_ctx_err_msg)
E           RuntimeError: Working outside of application context.
E           
E           This typically means that you attempted to use functionality that needed
E           to interface with the current application object in some way. To solve
E           this, set up an application context with app.app_context().  See the
E           documentation for more information.

.tox/c1/lib/python3.6/site-packages/flask/globals.py:51: RuntimeError
___________________________ test_replace_characters ____________________________

    def test_replace_characters():
        context = "url is [10]. restricted_fullname is [restricted_fullname]. advisor_name is [8]."
        data = {
            "url":"https://test_url.com",
            "restricted_fullname":"test_file.txt"
        }
        test = "url is https://test_url.com. restricted_fullname is test_file.txt. advisor_name is ."
    
        result = replace_characters(data,context)
>       assert result == test
E       AssertionError: assert ('url is https://test_url.com. restricted_fullname is test_file.txt. '\n 'advisor_name is [8].') == ('url is https://test_url.com. restricted_fullname is test_file.txt. '\n 'advisor_name is .')
E         - url is https://test_url.com. restricted_fullname is test_file.txt. advisor_name is .
E         + url is https://test_url.com. restricted_fullname is test_file.txt. advisor_name is [8].
E         ?                                                                                    +++

tests/test_utils.py:1108: AssertionError
______________________________ test_get_item_info ______________________________

item_id = 'item_id'

    def get_item_info(item_id):
        """Get item info.
    
        :item_id: item id
        """
        if not item_id:
            return dict()
        try:
>           item = ItemsMetadata.get_record(id_=item_id)

weko_workflow/utils.py:2153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140504399613176'>, args = ()
kwargs = {'id_': 'item_id'}

    def __call__(_mock_self, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        _mock_self._mock_check_sig(*args, **kwargs)
>       return _mock_self._mock_call(*args, **kwargs)

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1092: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140504399613176'>, args = ()
kwargs = {'id_': 'item_id'}
self = <MagicMock name='get_record' id='140504399613176'>
_call = call(id_='item_id'), do_method_calls = False
method_call_name = 'get_record', mock_call_name = '', is_a_call = False
_new_parent = None, effect = Exception('test error',)

    def _mock_call(_mock_self, *args, **kwargs):
        self = _mock_self
        self.called = True
        self.call_count += 1
    
        # handle call_args
        _call = _Call((args, kwargs), two=True)
        self.call_args = _call
        self.call_args_list.append(_call)
    
        # initial stuff for method_calls:
        do_method_calls = self._mock_parent is not None
        method_call_name = self._mock_name
    
        # initial stuff for mock_calls:
        mock_call_name = self._mock_new_name
        is_a_call = mock_call_name == '()'
        self.mock_calls.append(_Call(('', args, kwargs)))
    
        # follow up the chain of mocks:
        _new_parent = self._mock_new_parent
        while _new_parent is not None:
    
            # handle method_calls:
            if do_method_calls:
                _new_parent.method_calls.append(_Call((method_call_name, args, kwargs)))
                do_method_calls = _new_parent._mock_parent is not None
                if do_method_calls:
                    method_call_name = _new_parent._mock_name + '.' + method_call_name
    
            # handle mock_calls:
            this_mock_call = _Call((mock_call_name, args, kwargs))
            _new_parent.mock_calls.append(this_mock_call)
    
            if _new_parent._mock_new_name:
                if is_a_call:
                    dot = ''
                else:
                    dot = '.'
                is_a_call = _new_parent._mock_new_name == '()'
                mock_call_name = _new_parent._mock_new_name + dot + mock_call_name
    
            # follow the parental chain:
            _new_parent = _new_parent._mock_new_parent
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: test error

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1143: Exception

During handling of the above exception, another exception occurred:

db_records = [(<PersistentIdentifier recid:1 / rec:6a5147eb-c27b-469c-9029-28af1b671501 (R)>, <PersistentIdentifier depid:1 / rec:6...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:f6951a7f-4deb-4e58-b9d7-abb5b37eb899 (R)>, None, ...), ...]

    def test_get_item_info(db_records):
        result = get_item_info(db_records[0][3].id)
        assert result == {'type': 'depid', 'value': '1', 'revision_id': 0, 'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': '', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper', 'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}
        print("reslt:{}".format(result))
    
        with patch("weko_workflow.utils.ItemsMetadata.get_record",side_effect=Exception("test error")):
>           result = get_item_info("item_id")

tests/test_utils.py:1174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:2155: in get_item_info
    current_app.logger.exception('Cannot get item data:', ex)
/usr/local/lib/python3.6/logging/__init__.py:1343: in exception
    self.error(msg, *args, exc_info=exc_info, **kwargs)
/usr/local/lib/python3.6/logging/__init__.py:1337: in error
    self._log(ERROR, msg, args, **kwargs)
/usr/local/lib/python3.6/logging/__init__.py:1444: in _log
    self.handle(record)
/usr/local/lib/python3.6/logging/__init__.py:1454: in handle
    self.callHandlers(record)
/usr/local/lib/python3.6/logging/__init__.py:1516: in callHandlers
    hdlr.handle(record)
/usr/local/lib/python3.6/logging/__init__.py:865: in handle
    self.emit(record)
.tox/c1/lib/python3.6/site-packages/_pytest/logging.py:328: in emit
    super().emit(record)
/usr/local/lib/python3.6/logging/__init__.py:1000: in emit
    self.handleError(record)
/usr/local/lib/python3.6/logging/__init__.py:994: in emit
    msg = self.format(record)
/usr/local/lib/python3.6/logging/__init__.py:840: in format
    return fmt.format(record)
.tox/c1/lib/python3.6/site-packages/_pytest/logging.py:89: in format
    return super().format(record)
/usr/local/lib/python3.6/logging/__init__.py:577: in format
    record.message = record.getMessage()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <LogRecord: flask.app, 40, /code/modules/weko-workflow/weko_workflow/utils.py, 2155, "Cannot get item data:">

    def getMessage(self):
        """
        Return the message for this LogRecord.
    
        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        """
        msg = str(self.msg)
        if self.args:
>           msg = msg % self.args
E           TypeError: not all arguments converted during string formatting

/usr/local/lib/python3.6/logging/__init__.py:338: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_set_mail_info ______________________________

app = <Flask 'testapp'>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b6fd6b38>

    def test_set_mail_info(app, db_register, mocker):
        mocker.patch("weko_workflow.utils.get_site_info_name",return_value=("name_en","name_ja"))
        mocker.patch("weko_workflow.utils.get_default_mail_sender",return_value="default_sender")
        mocker.patch("weko_workflow.utils.get_register_info",return_value=("user@test.org","2022-10-10"))
        item_info = {
            "subitem_university/institution":"test_institution",
            "subitem_fullname":"test_fullname",
            "subitem_mail_address":"test@test.org",
            "subitem_research_title":"test_research_title",
            "subitem_dataset_usage":"test_dataset",
            "subitem_advisor_fullname":"test advisor",
            "subitem_guarantor_fullname":"test guarantor",
            "subitem_advisor_affiliation":"test advisor affiliation",
            "subitem_guarantor_affiliation":"test guarantor affiliation",
            "subitem_advisor_mail_address":"advisor@test.org",
            "subitem_guarantor_mail_address":"guarantor@test.org",
            "subitem_title":"test_sub_title",
            "subitem_restricted_access_name":"test access name",
            'subitem_restricted_access_university/institution':"test_restricted_institution",
            "subitem_restricted_access_research_title":"test_restricted_research_title",
            "subitem_restricted_access_dataset_usage":"test_restricted_dataset",
            "subitem_restricted_access_application_date":"test_restricted_date",
            "subitem_restricted_access_mail_address":"restricted@test.org",
        }
        activity_id = db_register["activities"][0].activity_id
        test = {
            "university_institution":"test_institution",
            "fullname":"test_fullname",
            "activity_id":activity_id,
            "mail_address":"test@test.org",
            "research_title":"test_research_title",
            "dataset_requested":"test_dataset",
            "register_date":"",
            "advisor_name":"test advisor",
            "guarantor_name":"test guarantor",
            "url":"http://TEST_SERVER.localdomain/",
            "advisor_affilication":"test advisor affiliation",
            "guarantor_affilication":"test guarantor affiliation",
            "advisor_mail":"advisor@test.org",
            "guarantor_mail":"guarantor@test.org",
            "register_user_mail":"",
            "report_number":activity_id,
            "registration_number":activity_id,
            "output_registration_title":"test_sub_title",
            "restricted_fullname":"test access name",
            'restricted_university_institution':"test_restricted_institution",
            "restricted_activity_id":activity_id,
            "restricted_research_title":"test_restricted_research_title",
            "restricted_data_name":"test_restricted_dataset",
            "restricted_application_date":"test_restricted_date",
            "restricted_mail_address":"restricted@test.org",
            "restricted_download_link":"",
            "restricted_expiration_date":"",
            "restricted_approver_name":"",
            "restricted_approver_affiliation":"",
            "restricted_site_name_ja":"name_ja",
            "restricted_site_name_en":"name_en",
            "restricted_site_mail":"default_sender",
            "restricted_site_url":"https://localhost",
            "mail_recipient":"restricted@test.org",
            "restricted_supervisor":"",
            "restricted_reference":""
        }
        with app.test_request_context():
>           result = set_mail_info(item_info,db_register["activities"][0],True)

tests/test_utils.py:1302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'subitem_advisor_affiliation': 'test advisor affiliation', 'subitem_advisor_fullname': 'test advisor', 'subitem_advisor_mail_address': 'advisor@test.org', 'subitem_dataset_usage': 'test_dataset', ...}
activity_detail = <Activity 1>, guest_user = True

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_process_send_reminder_mail ________________________

__wrapped_mock_method__ = <function NonCallableMock.assert_called_with at 0x7fc9d1e4f0d0>
args = (<MagicMock name='send_mail_reminder' id='140504383166896'>, {'mail_address': 'comadmin@test.org', 'template': 'template'})
kwargs = {}, __tracebackhide__ = True
msg = "Expected call: send_mail_reminder({'mail_address': 'comadmin@test.org', 'template': 'template'})\nActual call: send_m...+ ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},)\n  ?                                          ^^ ^^^"
__mock_self = <MagicMock name='send_mail_reminder' id='140504383166896'>
actual_args = ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},)
actual_kwargs = {}
introspection = "\nArgs:\nassert ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},) == ({'mail_address': 'comadmin@test.o...+ ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},)\n  ?                                          ^^ ^^^"
@py_assert2 = ({'mail_address': 'comadmin@test.org', 'template': 'template'},)
@py_assert1 = None
@py_format4 = "({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},) == ({'mail_address': 'comadmin@test.org', 'template':...~+ ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},)\n~?                                          ^^ ^^^"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None:
        __tracebackhide__ = True
        try:
>           __wrapped_mock_method__(*args, **kwargs)

.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='send_mail_reminder' id='140504383166896'>
args = ({'mail_address': 'comadmin@test.org', 'template': 'template'},)
kwargs = {}
expected = (({'mail_address': 'comadmin@test.org', 'template': 'template'},), {})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fc9b7592e18>
actual = call({'mail_address': 'comadmin@test.org', 'mail_id': 'template'})
cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: send_mail_reminder({'mail_address': 'comadmin@test.org', 'template': 'template'})
E           Actual call: send_mail_reminder({'mail_address': 'comadmin@test.org', 'mail_id': 'template'})

/usr/local/lib/python3.6/unittest/mock.py:814: AssertionError

During handling of the above exception, another exception occurred:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b80ceb70>

    def test_process_send_reminder_mail(db, db_register, mocker):
        mocker.patch("weko_workflow.utils.get_item_info",return_value={})
        mocker.patch("weko_workflow.utils.set_mail_info",return_value={})
        mock_sender = mocker.patch("weko_workflow.utils.send_mail_reminder")
        process_send_reminder_mail(db_register["activities"][1],"template")
>       mock_sender.assert_called_with({"mail_address":"comadmin@test.org","template":"template"})
E       AssertionError: Expected call: send_mail_reminder({'mail_address': 'comadmin@test.org', 'template': 'template'})
E       Actual call: send_mail_reminder({'mail_address': 'comadmin@test.org', 'mail_id': 'template'})
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},) == ({'mail_address': 'comadmin@test.org', 'template': 'template'},)
E         At index 0 diff: {'mail_address': 'comadmin@test.org', 'mail_id': 'template'} != {'mail_address': 'comadmin@test.org', 'template': 'template'}
E         Full diff:
E         - ({'mail_address': 'comadmin@test.org', 'template': 'template'},)
E         ?                                         -- ^ ^^^
E         + ({'mail_address': 'comadmin@test.org', 'mail_id': 'template'},)
E         ?                                          ^^ ^^^

tests/test_utils.py:1352: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ test_process_send_notification_mail ______________________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b6521b00>

    def test_process_send_notification_mail(db,db_register, mocker):
        mocker.patch("weko_workflow.utils.get_item_info",return_value={})
        mocker.patch("weko_workflow.utils.set_mail_info",return_value={})
        def mock_approval_date(data):
            data["approval_date"] = "2022-10-10"
            data["approval_date_after_7_days"] = "2022-10-17"
            data["31_march_corresponding_year"] = "2023-03-31"
        activity = db_register["activities"][0]
        mocker.patch("weko_workflow.utils.get_approval_dates",side_effect=mock_approval_date)
        mock_send_registration = mocker.patch("weko_workflow.utils.send_mail_registration_done")
        mock_send_approval_req = mocker.patch("weko_workflow.utils.send_mail_request_approval")
        mock_send_approval_done = mocker.patch("weko_workflow.utils.send_mail_approval_done")
        data = {
            "item_type_name":"テストアイテムタイプ",
            "next_step":"next_step",
            "approval_date":"2022-10-10",
            "approval_date_after_7_days": "2022-10-17",
            "31_march_corresponding_year": "2023-03-31"
        }
    
>       process_send_notification_mail(activity,"item_login","next_step")
E       TypeError: process_send_notification_mail() missing 1 required positional argument: 'action_mails_setting'

tests/test_utils.py:1411: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity_data_1 ___________________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b4081240>

    def test_save_activity_data_1(db_register, mocker):
        mock_update = mocker.patch("weko_workflow.utils.WorkActivity.update_activity")
        data = {
            "activity_id":db_register['activities'][0].activity_id,
            "title":"test title",
            "shared_user_ids":[],
            "approval1":"test1@test.org",
            "approval2":"test2@test.org"
        }
        save_activity_data(data)
>       assert db_register['activities'][0].shared_user_ids == []
E       AssertionError: assert '[]' == []
E         +'[]'
E         -[]

tests/test_utils.py:1800: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________ test_send_usage_application_mail_for_guest_user ________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b659e320>

    def test_send_usage_application_mail_for_guest_user(app,db,mocker):
        mail_config = MailConfig(mail_default_sender="test_sender")
        db.session.add(mail_config)
        db.session.commit()
        mail = "guest@test.org"
        url = "https://test.com"
        mock_sender = mocker.patch("weko_workflow.utils.send_mail_url_guest_user")
>       send_usage_application_mail_for_guest_user(mail,url)

tests/test_utils.py:1874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

guest_mail = 'guest@test.org', temp_url = 'https://test.com'

    def send_usage_application_mail_for_guest_user(guest_mail: str, temp_url: str):
        """Send usage application mail for guest user.
    
        @param guest_mail:
        @param temp_url:
        @return:
        """
        # Mail information
        site_name_en, site_name_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
        site_url = current_app.config['THEME_SITEURL']
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2912: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_get_activity_display_info ________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b2ab1278>

    def test_get_activity_display_info(app,db, users, db_register,mocker):
        with app.test_request_context():
            activity = db_register["activities"][1]
            activity_id = activity.activity_id
            db_history1 = ActivityHistory(
                activity_id=activity_id,
                action_id=3,
                action_user=users[0]["id"],
                action_status="F",
                action_date=datetime.datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f'),
                action_order=1
            )
            with db.session.begin_nested():
                db.session.add(db_history1)
            test_steps = [
                {"ActivityId":activity_id,"ActionId":1,"ActionName":"Start","ActionVersion":"1.0.0","ActionEndpoint":"begin_action","Author":"contributor@test.org","Status":"action_doing","ActionOrder":1},
                {"ActivityId":activity_id,"ActionId":3,"ActionName":"Item Registration","ActionVersion":"1.0.0","ActionEndpoint":"item_login","Author":"","Status":" ","ActionOrder":2},
                {"ActivityId":activity_id,"ActionId":5,"ActionName":"Item Link","ActionVersion":"1.0.0","ActionEndpoint":"item_link","Author":"","Status":" ","ActionOrder":3}
            ]
>           endpoint, action_id, activity_detail, cur_action, histories, item, steps, temporary_comment, workflow_detail = get_activity_display_info(activity_id)
E           ValueError: too many values to unpack (expected 9)

tests/test_utils.py:2053: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________ test___init_activity_detail_data_for_guest __________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9ba55e5f8>

    def test___init_activity_detail_data_for_guest(app,db,users,db_register,mocker):
        with app.test_request_context():
    
            activity = db_register["activities"][1]
            activity_id = activity.activity_id
            db_history1 = ActivityHistory(
                    activity_id=activity_id,
                    action_id=3,
                    action_user=users[0]["id"],
                    action_status="F",
                    action_date=datetime.datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f'),
                    action_order=1
                )
            with db.session.begin_nested():
                db.session.add(db_history1)
    
            test_steps = [
                {"ActivityId":activity_id,"ActionId":1,"ActionName":"Start","ActionVersion":"1.0.0","ActionEndpoint":"begin_action","Author":"contributor@test.org","Status":"action_doing","ActionOrder":1},
                {"ActivityId":activity_id,"ActionId":3,"ActionName":"Item Registration","ActionVersion":"1.0.0","ActionEndpoint":"item_login","Author":"","Status":" ","ActionOrder":2},
                {"ActivityId":activity_id,"ActionId":5,"ActionName":"Item Link","ActionVersion":"1.0.0","ActionEndpoint":"item_link","Author":"","Status":" ","ActionOrder":3}
            ]
            action_endpoint = "begin_action"
            action_id=1
            activity_detail=activity
            cur_action=activity.action
            histories=[db_history1]
            item=ItemsMetadata.get_record(id_=activity.item_id)
            steps=test_steps,
            temporary_comment=None
            workflow_detail=db_register["workflow"]
            display_info = (action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)
            mocker.patch("weko_workflow.utils.get_activity_display_info",return_value=display_info)
            mocker.patch("weko_workflow.utils.get_approval_keys",return_value=[])
            community_id=""
            session['user_id'] = 'dummy user'
            session["guest_email"] = "guest@test.org"
            user_profile = {
                "results":{
                    'subitem_user_name': "guest",
                    'subitem_fullname': "guest",
                    'subitem_mail_address': "guest@test.org",
                    'subitem_displayname': "guest",
                    'subitem_university/institution': '',
                    'subitem_affiliated_division/department': '',
                    'subitem_position': '',
                    'subitem_phone_number': '',
                    'subitem_position(other)': '',
                    'subitem_affiliated_institution': [],
                }
            }
            test = dict(
                page=None,
                render_widgets=False,
                community_id=community_id,
                temporary_journal='',
                temporary_idf_grant='',
                temporary_idf_grant_suffix='',
                idf_grant_data='',
                idf_grant_input=IDENTIFIER_GRANT_LIST,
                idf_grant_method=0,
                error_type='item_login_error',
                cur_step=action_endpoint,
                approval_record=[],
                recid=None,
                links=None,
                term_and_condition_content='',
                is_auto_set_index_action=True,
                application_item_type=False,
                auto_fill_title="",
                auto_fill_data_type=None,
                is_show_autofill_metadata=True,
                is_hidden_pubdate=False,
                position_list=WEKO_USERPROFILES_POSITION_LIST,
                institute_position_list=WEKO_USERPROFILES_INSTITUTE_POSITION_LIST,
                item_type_name="テストアイテムタイプ",
                res_check=1,
                action_id=action_id,
                activity=activity_detail,
                histories=histories,
                item=item,
                steps=steps,
                temporary_comment=temporary_comment,
                workflow_detail=workflow_detail,
                user_profile=user_profile,
                list_license=[{'value': 'license_free', 'name': 'write your own license'}, {'value': 'license_12', 'name': 'Creative Commons CC0 1.0 Universal Public Domain Designation'}, {'value': 'license_6', 'name': 'Creative Commons Attribution 3.0 Unported (CC BY 3.0)'}, {'value': 'license_7', 'name': 'Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)'}, {'value': 'license_8', 'name': 'Creative Commons Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)'}, {'value': 'license_9', 'name': 'Creative Commons Attribution-NonCommercial 3.0 Unported (CC BY-NC 3.0)'}, {'value': 'license_10', 'name': 'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)'}, {'value': 'license_11', 'name': 'Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0)'}, {'value': 'license_0', 'name': 'Creative Commons Attribution 4.0 International (CC BY 4.0)'}, {'value': 'license_1', 'name': 'Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)'}, {'value': 'license_2', 'name': 'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)'}, {'value': 'license_3', 'name': 'Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)'}, {'value': 'license_4', 'name': 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)'}, {'value': 'license_5', 'name': 'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)'}],
                cur_action=cur_action,
                activity_id=activity_detail.activity_id,
                is_enable_item_name_link=True,
                enable_feedback_maillist=current_app.config[
                    'WEKO_WORKFLOW_ENABLE_FEEDBACK_MAIL'],
                enable_contributor=current_app.config[
                    'WEKO_WORKFLOW_ENABLE_CONTRIBUTOR'],
                out_put_report_title="",
                action_endpoint_key={},
                approval_email_key=[],
                step_item_login_url="weko_items_ui/iframe/item_edit.html",
                need_file=True,
                need_billing_file=False,
                records={'id': '1.1', 'pid': {'type': 'depid', 'value': '1.1', 'revision_id': 0}, 'lang': 'ja', 'owner': '1', 'title': 'title', 'owners': [1], 'status': 'published', '$schema': '/items/jsonschema/15', 'pubdate': '2022-08-20', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}, 'shared_user_ids': [], 'item_1617186331708': [{'subitem_1551255647225': 'ff', 'subitem_1551255648112': 'ja'}], 'item_1617258105262': {'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}},
                record=[],
                jsonschema="/items/jsonschema/1",
                schemaform="/items/schemaform/1",
                item_save_uri="/items/iframe/model/save",
                files=[],
                endpoints={},
                need_thumbnail=False,
                files_thumbnail=[],
                allow_multi_thumbnail=False,
                id=db_register["workflow"].itemtype_id,
            )
    
>           result = __init_activity_detail_data_for_guest(activity_id,community_id)

tests/test_utils.py:2194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '2', community_id = ''

    def __init_activity_detail_data_for_guest(activity_id: str, community_id: str):
        """Init activity data for guest user.
    
        @param activity_id:
        @param community_id:
        @return:
        """
        from weko_records_ui.utils import get_list_licence
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/utils.py:3122: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_process_send_approval_mails _______________________

app = <Flask 'testapp'>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b2052908>

    def test_process_send_approval_mails(app,db_register,users,mocker):
        mocker.patch("weko_workflow.utils.get_item_info",return_value=None)
        mail_info={
            "restricted_download_link":"",
            "restricted_expiration_date":"",
            "restricted_expiration_date_en":"",
            "restricted_expiration_date_en":""
        }
        mocker.patch("weko_workflow.utils.set_mail_info",return_value=mail_info)
        activity = db_register["activities"][1]
        next_step_appover_id = users[2]["id"]
        file_data={
                    "file_url":"test_url",
                    "expiration_date":"",
                    "expiration_date_ja":"無制限",
                    "expiration_date_en":"Unlimited"
                }
        # approval is True,previous.inform_approval is True
        actions_mail_setting={
            "previous":{"inform_reject":False,"inform_approval":True,"request_approval":False},
            "next": {},
            "approval": True,
            "reject": False}
        mail_info={
            "restricted_download_link":"",
            "restricted_expiration_date":"",
            "restricted_expiration_date_en":"",
            "restricted_expiration_date_en":""
        }
        mocker.patch("weko_workflow.utils.set_mail_info",return_value=mail_info)
        test_mail_info = {
            "restricted_download_link":"test_url",
            "restricted_expiration_date":"",
            "restricted_expiration_date_ja":"無制限",
            "restricted_expiration_date_en":"Unlimited"
        }
        mock_sender = mocker.patch("weko_workflow.utils.process_send_mail")
>       process_send_approval_mails(activity, actions_mail_setting,next_step_appover_id,file_data)

tests/test_utils.py:2415: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:3411: in process_send_approval_mails
    if _check_mail_setting(setting):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

setting = True

    def _check_mail_setting(setting):
        """Check setting."""
>       if setting and setting.get("send", False) and setting.get("mail", ""):
E       AttributeError: 'bool' object has no attribute 'get'

weko_workflow/utils.py:88: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________________ test_get_usage_data ______________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_get_usage_data(app,db,db_register):
    
        # not exist extra_info activity
        activity = db_register["activities"][1]
        result = get_usage_data(1,activity)
        assert result == {}
    
        activity = db_register["activities"][6]
        result = get_usage_data(1,activity)
        assert result == {}
    
        today = datetime.datetime.now()
        test = dict(
            usage_type='Application',
            dataset_usage="related_guest_activity",
            usage_data_name='',
            mail_address="guest@test.org",
            university_institution='',
            affiliated_division_department='',
            position='',
            position_other='',
            phone_number='',
            usage_report_id='',
            wf_issued_date=today.strftime("%Y-%m-%d"),
            item_title="{}{}{}_".format("利用申請",today.strftime("%Y%m%d"),"related_guest_activity")
        )
        result = get_usage_data(31001,activity)
>       assert result == test
E       AssertionError: assert {} == {'affiliated_division_department': '',\n 'dataset_usage': 'related_guest_activity',\n 'item_title': '利用申請20230712related_guest_activity_',\n 'mail_address': 'guest@test.org',\n 'phone_number': '',\n 'position': '',\n 'position_other': '',\n 'university_institution': '',\n 'usage_data_name': '',\n 'usage_report_id': '',\n 'usage_type': 'Application',\n 'wf_issued_date': '2023-07-12'}
E         Right contains 12 more items:
E         {'affiliated_division_department': '',
E          'dataset_usage': 'related_guest_activity',
E          'item_title': '利用申請20230712related_guest_activity_',
E          'mail_address': 'guest@test.org',
E          'phone_number': '',
E          'position': '',
E          'position_other': '',
E          'university_institution': '',
E          'usage_data_name': '',
E          'usage_report_id': '',
E          'usage_type': 'Application',
E          'wf_issued_date': '2023-07-12'}
E         Full diff:
E           {
E         +  ,
E         -  'affiliated_division_department': '',
E         -  'dataset_usage': 'related_guest_activity',
E         -  'item_title': '利用申請20230712related_guest_activity_',
E         -  'mail_address': 'guest@test.org',
E         -  'phone_number': '',
E         -  'position': '',
E         -  'position_other': '',
E         -  'university_institution': '',
E         -  'usage_data_name': '',
E         -  'usage_report_id': '',
E         -  'usage_type': 'Application',
E         -  'wf_issued_date': '2023-07-12',
E           }

tests/test_utils.py:2540: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ test_update_system_data_for_activity _____________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_update_system_data_for_activity(db_register):
        update_system_data_for_activity(None,None,None)
    
        key = "temp_key"
        value = {"data_key":"data_value"}
        activity = db_register["activities"][1]
        update_system_data_for_activity(activity,key,value)
>       assert activity.temp_data == {"metainfo":{key:value}}
E       assert '{"metainfo": {"temp_key": {"data_key": "data_value"}}}' == {'metainfo': {'temp_key': {'data_key': 'data_value'}}}
E         +'{"metainfo": {"temp_key": {"data_key": "data_value"}}}'
E         -{'metainfo': {'temp_key': {'data_key': 'data_value'}}}

tests/test_utils.py:2663: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_index_id _______________________________

    def test_get_index_id():
        """Get index ID base on activity id"""
        # from weko_workflow.api import WorkActivity, WorkFlow
    
        # activity = WorkActivity()
        # activity_detail = activity.get_activity_detail(activity_id)
    
        # workflow = WorkFlow()
        # workflow_detail = workflow.get_workflow_by_id(
        #     activity_detail.workflow_id)
    
        # index_tree_id = workflow_detail.index_tree_id
    
        # if index_tree_id:
        #     from .api import Indexes
        #     index_result = Indexes.get_index(index_tree_id)
        #     if not index_result:
        #         index_tree_id = None
        # else:
        #     index_tree_id = None
>       raise BaseException
E       BaseException

tests/test_utils.py:2725: BaseException
_____________________________ test_iframe_success ______________________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9aeaff780> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9aeada400>, None, ...), ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9aea77908>

    def test_iframe_success(client, db_register,users, db_records,mocker):
        mock_render_template = MagicMock(return_value=jsonify({}))
        item = db_records[0][3]
        session = {
            "itemlogin_id":"1",
            "itemlogin_activity":db_register["activities"][1],
            "itemlogin_item":item,
            "itemlogin_steps":"test steps",
            "itemlogin_action_id":3,
            "itemlogin_cur_step":"item_login",
            "itemlogin_record":"test approval_record",
            "itemlogin_histories":"test histories",
            "itemlogin_res_check":0,
            "itemlogin_pid":db_records[0][0],
            "itemlogin_community_id":"comm01"
        }
        mocker.patch("weko_workflow.views.session",session)
        with patch("weko_workflow.views.render_template", mock_render_template):
            url = url_for("weko_workflow.iframe_success")
            res = client.get(url)
            mock_render_template.assert_called()
    
        session = {
            "itemlogin_id":"1",
            "itemlogin_activity":db_register["activities"][1],
            "itemlogin_item":{},
            "itemlogin_steps":"test steps",
            "itemlogin_action_id":3,
            "itemlogin_cur_step":"item_login",
            "itemlogin_record":"test approval_record",
            "itemlogin_histories":"test histories",
            "itemlogin_res_check":0,
            "itemlogin_pid":db_records[0][0],
        }
        mocker.patch("weko_workflow.views.session",session)
        with patch("weko_workflow.views.render_template", mock_render_template):
            url = url_for("weko_workflow.iframe_success")
>           res = client.get(url)

tests/test_views.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:341: in iframe_success
    activity.activity_id, action_id, activity.action_order)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73b3b70; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9aea994a8>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7fc9aea99e80> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_init_activity[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9adb53ac8>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9ad3904e0>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9ad6ce390> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:37:52.688338', '2023-07-12 17:37:52.688348', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '2', '2', 'M', '2023-07-12 17:37:52.683952', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
__________________________ test_init_activity[1-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9ad183cc0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9ad0dc0b8>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9ad0f7da0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:38:28.127378', '2023-07-12 17:38:28.127389', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '4', '4', 'M', '2023-07-12 17:38:28.118270', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
__________________________ test_init_activity[2-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9acb75ef0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9acc002b0>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9accc77f0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:39:04.799048', '2023-07-12 17:39:04.799058', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '5', '5', 'M', '2023-07-12 17:39:04.793644', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
__________________________ test_init_activity[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b932ea20>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9b31cb358>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9bacd4240> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:39:43.138226', '2023-07-12 17:39:43.138236', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '3', '3', 'M', '2023-07-12 17:39:43.132174', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
__________________________ test_init_activity[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9ba077a20>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9b0eb2780>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9b845c898> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:40:20.665516', '2023-07-12 17:40:20.665526', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '6', '6', 'M', '2023-07-12 17:40:20.660973', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
__________________________ test_init_activity[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b80d1668>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9b19a40f0>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9afccbac8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:40:57.058927', '2023-07-12 17:40:57.058960', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '7', '7', 'M', '2023-07-12 17:40:57.053870', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
__________________________ test_init_activity[6-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b7c2d320>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register,mocker):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        mocker.patch("weko_workflow.views.is_terms_of_use_only",return_value=False)
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == status_code
    
        input = {'workflow_id': -99, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
        assert res.status_code == 500
    
>       input = {'workflow_id': db_register['workflow'].id, 'flow_id': -99}

tests/test_views.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c7412ba8; WorkFlow>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9ad1838d0>
attribute_names = {'created', 'flow_id', 'flows_id', 'flows_name', 'id', 'index_tree_id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <WorkFlow at 0x7fc9b25f3748> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:536 sqlalchemy error: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_activity (status, created, updated, activity_id, activity_name, item_id, workflow_id, workflow_status, flow_id, action_id, action_status, activity_login_user, activity_update_user, activity_status, activity_start, activity_end, activity_community_id, activity_confirm_term_of_use, title, shared_user_ids, temp_data, approval1, approval2, extra_info, action_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-07-12 17:41:34.096758', '2023-07-12 17:41:34.096769', 'A-20230712-00017', None, None, -99, None, 1, 3, 'B', '8', '8', 'M', '2023-07-12 17:41:34.085747', None, None, 1, None, '{}', '{}', None, None, '{}', 2)] (Background on this error at: http://sqlalche.me/e/gkpj)
____________________ test_init_activity_guest_users[0-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[1-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[2-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[3-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[4-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[5-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[6-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:609: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4065: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________ test_previous_action_acl_users[0-403-False] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 403, is_admin = False

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________ test_previous_action_acl_users[1-403-True] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 403, is_admin = True

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________ test_previous_action_acl_users[2-403-True] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 403, is_admin = True

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________ test_previous_action_acl_users[3-403-True] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 403, is_admin = True

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________ test_previous_action_acl_users[4-403-False] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 403, is_admin = False

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________ test_previous_action_acl_users[5-403-False] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 403, is_admin = False

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________ test_previous_action_acl_users[6-403-True] __________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 403, is_admin = True

    @pytest.mark.parametrize('users_index, status_code, is_admin', [
        (0, 403, False),
        (1, 403, True),
        (2, 403, True),
        (3, 403, True),
        (4, 403, False),
        (5, 403, False),
        (6, 403, True),
    ])
    def test_previous_action_acl_users(client, users, db_register, users_index, status_code, is_admin):
        """Test of previous action."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.previous_action',
                      activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
        with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                   return_value=(roles, action_users)):
>           res = client.post(url, json=input)

tests/test_views.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {}, activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_previous_action[0-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
_________________________ test_previous_action[1-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
_________________________ test_previous_action[2-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
_________________________ test_previous_action[3-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
_________________________ test_previous_action[4-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
_________________________ test_previous_action[5-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
_________________________ test_previous_action[6-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
>       res = client.post(url, json=input)

tests/test_views.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1841: in previous_action
    process_send_approval_mails(activity_detail, action_mails_setting, -1, {})
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1787 previous_action: argument error
ERROR    flask.app:views.py:1793 previous_action: test error
___________________________ test_next_action[0-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9a45241d0> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9a443a160>, None, ...), ...]
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a44afb38>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:949: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1117: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73b3b70; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9a443fa90>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7fc9a443f588> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
___________________________ test_next_action[1-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9a4b7e208> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9a4e5dc18>, None, ...), ...]
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a660d160>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
>       res = client.post(url, json=input)

tests/test_views.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1437: in next_action
    next_action_endpoint, action_mails_setting)
weko_workflow/utils.py:2312: in process_send_notification_mail
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
ERROR    flask.app:views.py:1271 next_action: can not get activity_detail
ERROR    flask.app:views.py:1279 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1284 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1345 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1353 next_action: can not get record
ERROR    flask.app:views.py:1337 can not get PersistentIdentifier
ERROR    flask.app:views.py:1345 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
___________________________ test_next_action[2-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9a9aa1c18> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9aae5e780>, None, ...), ...]
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a82abcc0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
>       res = client.post(url, json=input)

tests/test_views.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1437: in next_action
    next_action_endpoint, action_mails_setting)
weko_workflow/utils.py:2312: in process_send_notification_mail
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
ERROR    flask.app:views.py:1271 next_action: can not get activity_detail
ERROR    flask.app:views.py:1279 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1284 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1345 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1353 next_action: can not get record
ERROR    flask.app:views.py:1337 can not get PersistentIdentifier
ERROR    flask.app:views.py:1345 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
___________________________ test_next_action[3-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9a6229208> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9a671a240>, None, ...), ...]
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9aea6a630>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:949: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1111: in decorated_function
    if check_authority_by_admin(activity_detail):
weko_workflow/utils.py:3725: in check_authority_by_admin
    if activity.activity_login_user in community_user_ids:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73b3b70; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9a9fcec18>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7fc9a9fce2e8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
___________________________ test_next_action[4-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9af6f8390> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9a96bbf28>, None, ...), ...]
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a5da2ef0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:949: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1117: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73b3b70; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9a51fd1d0>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7fc9a51fd198> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
___________________________ test_next_action[5-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9a6c7f240> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9a6c72588>, None, ...), ...]
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a5116940>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:949: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1117: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73b3b70; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9a6b00160>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7fc9a6b000b8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
___________________________ test_next_action[6-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7fc9a50c8358> is not bound to a Session; attribute refr... refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7fc9a5974da0>, None, ...), ...]
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a5117d30>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
>       res = client.post(url, json=input)

tests/test_views.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1437: in next_action
    next_action_endpoint, action_mails_setting)
weko_workflow/utils.py:2312: in process_send_notification_mail
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 4>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1263 next_action: argument error
ERROR    flask.app:views.py:1271 next_action: can not get activity_detail
ERROR    flask.app:views.py:1279 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1284 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1345 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1353 next_action: can not get record
ERROR    flask.app:views.py:1337 can not get PersistentIdentifier
ERROR    flask.app:views.py:1345 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
__________________ test_next_action_usage_application[0-200] ___________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_usage_application = {'activity1': <Activity 1>, 'activity2': <Activity 2>, 'activity3': <Activity 3>, 'activity4': <Activity 4>, ...}
db_records = [(<PersistentIdentifier recid:1 / rec:7a790d81-cec9-47cd-a425-76265cde2894 (R)>, <PersistentIdentifier depid:1 / rec:7...: 'conference paper'}}, <PersistentIdentifier recid:2 / rec:b2c22c8a-961e-4e23-81b9-bd0534009ed3 (R)>, None, ...), ...]
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9a5652da0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200)
    ])
    def test_next_action_usage_application(client, db, users, db_register_usage_application, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
        urls = []
        urls.append(url_for("weko_workflow.next_action",
                    activity_id="A-00000001-20001", action_id=3))
        urls.append(url_for("weko_workflow.next_action",
                    activity_id="A-00000001-20002", action_id=4))
        urls.append(url_for("weko_workflow.next_action",
                    activity_id="A-00000001-20003", action_id=4))
        urls.append(url_for("weko_workflow.next_action",
                    activity_id="A-00000001-20004", action_id=4))
        # update_activity_order("2",3,2)
        input = {
    
        }
    
        for url in urls:
>           res = client.post(url, json=input)

tests/test_views.py:1639: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:1433: in next_action
    url_and_expired_date)
weko_workflow/utils.py:3393: in process_send_approval_mails
    mail_info = set_mail_info(item_info, activity_detail, is_guest_user)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

item_info = {'displayname': '', 'email': 'wekosoftware@nii.ac.jp', 'resourcetype': 'conference paper', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', ...}
activity_detail = <Activity 1>, guest_user = False

    def set_mail_info(item_info, activity_detail, guest_user=False):
        """Set main mail info.
    
        :item_info: object
        :activity_detail: object
        :guest_user: object
        """
        def _get_restricted_data_name():
            result = item_info.get('subitem_restricted_access_dataset_usage', '')
            if not result:
                result = item_info.get('subitem_dataset_usage', '')
            return result
    
        def _get_restricted_research_title():
            result = item_info.get('subitem_restricted_access_research_title', '')
            if not result:
                result = item_info.get('subitem_research_title', '')
            return result
    
        mail_address = item_info.get('subitem_mail_address')
        site_en, site_ja = get_site_info_name()
        site_mail = get_default_mail_sender()
>       institution_name_ja = current_app.config['THEME_INSTITUTION_NAME']['ja']
E       KeyError: 'THEME_INSTITUTION_NAME'

weko_workflow/utils.py:2215: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
_________________________ test_send_mail_users[0-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_send_mail_users[1-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_send_mail_users[2-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_send_mail_users[3-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_send_mail_users[4-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_send_mail_users[5-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_send_mail_users[6-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_send_mail_users(client, users, users_index, status_code):
        """Test of send mail."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.send_mail', activity_id='1',
                      mail_template='a')
        input = {}
        with patch('weko_workflow.views.process_send_reminder_mail'):
>           res = client.post(url, json=input)

tests/test_views.py:1926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {'activity_id': '1', 'mail_template': 'a'}

    @wraps(func)
    def decorated_view(*args, **kwargs):
        if request.method in EXEMPT_METHODS:
            return func(*args, **kwargs)
        elif current_app.login_manager._login_disabled:
            return func(*args, **kwargs)
        elif not current_user.is_authenticated:
            return current_app.login_manager.unauthorized()
>       return func(*args, **kwargs)
E       TypeError: send_mail() got an unexpected keyword argument 'mail_template'

.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[1-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[2-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[6-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1981: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_get_feedback_maillist[0-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9ac88a8d0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc9ac88a0b8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[1-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9b1b45e80>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc9b1b45da0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[2-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9b25df400>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc9b0ecd240> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[3-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9bc6c66a0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc9be3eeb38> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[4-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc995f9d0f0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc995f9d898> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[5-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc995263160>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc995263b70> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[6-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fc9c73edc88; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fc9ba503550>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7fc9ba503f98> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2336 get_feedback_maillist: argument error
__________________________ test_save_activity[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity[1-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity[2-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_save_activity[6-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_save_activity(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = client.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2388: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_save_activity_guestlogin _________________________

guest = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_save_activity_guestlogin(guest,db_register2):
        url = url_for('weko_workflow.save_activity')
    
        input = {"activity_id":"A-20220921-00001","title":"test"}
        res = guest.post(url, json=input)
        data = response_data(res)
>       assert res.status_code== 400
E       assert 200 == 400
E         +200
E         -400

tests/test_views.py:2415: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_display_activity_guestlogin _______________________

app = <Flask 'testapp'>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
guest = <FlaskClient <Flask 'testapp'>>

    def test_display_activity_guestlogin(app,db_register ,guest):
        """Test of display activity."""
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                        return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = guest.post(url, json=input)

tests/test_views.py:2478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[0-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[3-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[4-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[5-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_display_activity_users[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity_users(client, users, db_register, users_index, status_code):
        """
        Test of display activity.
        Expected: users[0]: AssertionError
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.display_activity', activity_id='1')
        input = {}
    
        activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item = None
        steps = 1
        temporary_comment = 1
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.check_authority_action'):
                with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                           return_value=(roles, action_users)):
                    with patch('weko_workflow.views.render_template', mock_render_template):
>                       res = client.post(url, json=input)

tests/test_views.py:2528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[0-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9b0012e80>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc99ce55ac8>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[1-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc99624c5f8>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc9b4a4ca20>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[2-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc99481b4e0>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc99e19bef0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[3-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc999c5a630>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc994b2a748>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[4-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc99914f7f0>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc9b07dc080>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[5-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc991e66080>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc991dfd6d8>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_display_activity[6-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9918cbba8>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc991997160>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_ids": [], "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:2638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-10001'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________________________ test_display_activity_1 ____________________________

client = <FlaskClient <Flask 'testapp'>>
users_1 = [{'email': 'user1@sample.com', 'id': 1, 'obj': <User 1>}, {'email': 'user2@sample.com', 'id': 2, 'obj': <User 2>}, {'email': 'sysadmin@test.org', 'id': 3, 'obj': <User 3>}]
db_register_1 = {'activities': [<Activity 1>], 'flow_define': <FlowDefine 1>, 'item_type': <ItemType 1>, 'workflow': <WorkFlow 1>}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc9913baf98>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7fc99105e780>

    def test_display_activity_1(client, users_1, db_register_1, mocker, redis_connect):
        # ユーザー１でログイン
        login(client=client, email=users_1[0]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-00005').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
    
        item = None
        steps = 1
        temporary_comment = 1
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '100.0'
    
        test_comm= Community()
        test_comm.id = 'test'
    
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-00005')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
>                                   res = client.post(url, query_string=input)

tests/test_views.py:3184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = 'A-00000001-00005'

    @workflow_blueprint.route('/activity/detail/<string:activity_id>',
                     methods=['GET', 'POST'])
    @login_required_customize
    def display_activity(activity_id="0"):
        """各アクティビティのビューをレンダリングする
    
        各アクティビティの画面表示に必要な情報を取得し、
        レンダリングする。
    
        Args:
            activity_id (str, optional): 対象のアクティビティID.パスパラメータから取得. Defaults to '0'.
    
        Returns:
            str: render result of weko_workflow/activity_detail.html
    
        ---
        get:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                    name: activity_id
                    description: 対象のアクティビティID
                    schema:
                        type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        post:
            description: "render template"
            security:
                - login_required: []
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: query
                    name: community
                    description: community id
                    schema:
                        type: string
            responses:
                200:
                    description: "render_template"
                    content:
                        text/html
                404:
                    description: "Exception"
                    content:
                        text/html
        """
    
        check_flg = type_null_check(activity_id, str)
        if not check_flg:
            current_app.logger.error("display_activity: argument error")
            return render_template("weko_theme/error.html",
                    error="can not get data required for rendering")
    
        activity = WorkActivity()
        if "?" in activity_id:
            activity_id = activity_id.split("?")[0]
    
        action_endpoint, action_id, activity_detail, cur_action, histories, item, \
            steps, temporary_comment, workflow_detail, owner_id, shared_user_ids = \
>           get_activity_display_info(activity_id)
E       ValueError: not enough values to unpack (expected 11, got 9)

weko_workflow/views.py:790: ValueError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 0, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 1, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 2, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 3, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 4, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 5, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 6, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1112: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_ test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] _

guest = <FlaskClient <Flask 'testapp'>>
client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
input_data = {'passwd': 'DELETE'}, status_code = 500, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    def test_withdraw_confirm_exception2_guestlogin(guest, client, users, db_register_fullaction, input_data, status_code, code, msg):
        """Test of withdraw confirm."""
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                return_value=(roles, action_users)):
>               res = guest.post(url, json=input)

tests/test_views.py:3408: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1132: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2238: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_check_authority_action __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_check_authority_action(client, users, db_register):
        current_app.config['WEKO_WORKFLOW_ENABLE_CONTRIBUTOR'] = True
    
        # ログインユーザーが、登録ユーザーでない場合
        login(client=client, email=users[2]['email'])
>       assert 1 == check_authority_action(activity_id='11',
                               action_id=0,
                               contain_login_item_application=False,
                               action_order=0)

tests/test_views.py:3487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/views.py:1141: in check_authority_action
    if not current_user.is_authenticated:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = None, name = 'is_authenticated'

    def __getattr__(self, name):
        if name == "__members__":
            return dir(self._get_current_object())
>       return getattr(self._get_current_object(), name)
E       AttributeError: 'NoneType' object has no attribute 'is_authenticated'

.tox/c1/lib/python3.6/site-packages/werkzeug/local.py:348: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
=============================== warnings summary ===============================
.tox/c1/lib/python3.6/site-packages/invenio_indexer/cli.py:96
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/invenio_indexer/cli.py:96: DeprecationWarning: 'resultcallback' has been renamed to 'result_callback'. The old name will be removed in Click 8.1.
    @queue.resultcallback()

.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3: DeprecationWarning: 'werkzeug.contrib.cache' is deprecated as of version 0.15 and will be removed in version 1.0. It has moved to https://github.com/pallets/cachelib.
    from werkzeug.contrib.cache import NullCache, SimpleCache, FileSystemCache

.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

.tox/c1/src/pypdf2/PyPDF2/generic.py:348
  /code/modules/weko-workflow/.tox/c1/src/pypdf2/PyPDF2/generic.py:348: DeprecationWarning: invalid escape sequence \c
    b_("c") : b_("\c"),

tests/test_admin.py: 676 warnings
tests/test_api.py: 260 warnings
tests/test_cli.py: 52 warnings
tests/test_romeo.py: 78 warnings
tests/test_sessions.py: 26 warnings
tests/test_tasks.py: 26 warnings
tests/test_utils.py: 2236 warnings
tests/test_views.py: 6864 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/invenio_admin/ext.py:73: PendingDeprecationWarning: Usage of model and modelview kwargs are deprecated in favor of view_class, args and kwargs.
    PendingDeprecationWarning

tests/test_admin.py: 26 warnings
tests/test_api.py: 10 warnings
tests/test_cli.py: 2 warnings
tests/test_romeo.py: 3 warnings
tests/test_sessions.py: 1 warning
tests/test_tasks.py: 1 warning
tests/test_utils.py: 86 warnings
tests/test_views.py: 264 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: created_userId,created_date,updated_userId,updated_date
    warnings.warn(text)

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                  Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------------
weko_workflow/__init__.py                 4      0      0      0   100%
weko_workflow/admin.py                  256     34     97      7    84%
weko_workflow/api.py                   1209    425    406     89    61%
weko_workflow/bundles.py                 14      0      0      0   100%
weko_workflow/cli.py                    109     22     42     15    74%
weko_workflow/config.py                  84      0      0      0   100%
weko_workflow/errors.py                  18      0     10      0   100%
weko_workflow/ext.py                     21      1     10      2    90%
weko_workflow/models.py                 305     17     76     10    92%
weko_workflow/romeo.py                   22      0      0      0   100%
weko_workflow/schema/marshmallow.py      87      0     56      0   100%
weko_workflow/schema/utils.py            22      6     14      4    67%
weko_workflow/scopes.py                   6      0      0      0   100%
weko_workflow/sessions.py                13      5      4      1    53%
weko_workflow/tasks.py                    7      0      0      0   100%
weko_workflow/utils.py                 1944    749    852     71    58%
weko_workflow/version.py                  2      0      0      0   100%
weko_workflow/views.py                 1240    662    434     41    42%
-----------------------------------------------------------------------
TOTAL                                  5363   1921   2001    240    60%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
FAILED tests/test_admin.py::TestFlowSettingView::test_update_flow - Attribute...
FAILED tests/test_admin.py::TestFlowSettingView::test_get_actions - Assertion...
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200]
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows
FAILED tests/test_api.py::test_WorkActivity_get_all_activity_list - assert 15...
FAILED tests/test_cli.py::test_init_workflow_tables - assert ("(sqlite3.Integ...
FAILED tests/test_utils.py::test_item_metadata_validation - sqlalchemy.exc.St...
FAILED tests/test_utils.py::test_delete_bucket - sqlalchemy.exc.IntegrityErro...
FAILED tests/test_utils.py::test_set_bucket_default_size - AttributeError: 'R...
FAILED tests/test_utils.py::test_get_parent_pid_with_type - AttributeError: '...
FAILED tests/test_utils.py::test_convert_record_to_item_metadata - KeyError: ...
FAILED tests/test_utils.py::test_prepare_edit_workflow - KeyError: 'owners'
FAILED tests/test_utils.py::test_handle_finish_workflow - ModuleNotFoundError...
FAILED tests/test_utils.py::test_send_mail_reminder - TypeError: 'NoneType' o...
FAILED tests/test_utils.py::test_get_mail_data - RuntimeError: Working outsid...
FAILED tests/test_utils.py::test_replace_characters - AssertionError: assert ...
FAILED tests/test_utils.py::test_get_item_info - TypeError: not all arguments...
FAILED tests/test_utils.py::test_set_mail_info - KeyError: 'THEME_INSTITUTION...
FAILED tests/test_utils.py::test_process_send_reminder_mail - AssertionError:...
FAILED tests/test_utils.py::test_process_send_notification_mail - TypeError: ...
FAILED tests/test_utils.py::test_save_activity_data_1 - AssertionError: asser...
FAILED tests/test_utils.py::test_send_usage_application_mail_for_guest_user
FAILED tests/test_utils.py::test_get_activity_display_info - ValueError: too ...
FAILED tests/test_utils.py::test___init_activity_detail_data_for_guest - Valu...
FAILED tests/test_utils.py::test_process_send_approval_mails - AttributeError...
FAILED tests/test_utils.py::test_get_usage_data - AssertionError: assert {} =...
FAILED tests/test_utils.py::test_update_system_data_for_activity - assert '{"...
FAILED tests/test_utils.py::test_get_index_id - BaseException
FAILED tests/test_views.py::test_iframe_success - sqlalchemy.orm.exc.Detached...
FAILED tests/test_views.py::test_init_activity[0-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity[1-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity[2-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity[3-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity[4-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity[5-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity[6-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_init_activity_guest_users[0-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[1-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[2-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[3-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[4-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[5-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[6-200] - IndexErro...
FAILED tests/test_views.py::test_previous_action_acl_users[0-403-False] - Key...
FAILED tests/test_views.py::test_previous_action_acl_users[1-403-True] - KeyE...
FAILED tests/test_views.py::test_previous_action_acl_users[2-403-True] - KeyE...
FAILED tests/test_views.py::test_previous_action_acl_users[3-403-True] - KeyE...
FAILED tests/test_views.py::test_previous_action_acl_users[4-403-False] - Key...
FAILED tests/test_views.py::test_previous_action_acl_users[5-403-False] - Key...
FAILED tests/test_views.py::test_previous_action_acl_users[6-403-True] - KeyE...
FAILED tests/test_views.py::test_previous_action[0-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_previous_action[1-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_previous_action[2-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_previous_action[3-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_previous_action[4-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_previous_action[5-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_previous_action[6-200] - KeyError: 'THEME_IN...
FAILED tests/test_views.py::test_next_action[0-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[1-200] - KeyError: 'THEME_INSTIT...
FAILED tests/test_views.py::test_next_action[2-200] - KeyError: 'THEME_INSTIT...
FAILED tests/test_views.py::test_next_action[3-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[4-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[5-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[6-200] - KeyError: 'THEME_INSTIT...
FAILED tests/test_views.py::test_next_action_usage_application[0-200] - KeyEr...
FAILED tests/test_views.py::test_send_mail_users[0-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_send_mail_users[1-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_send_mail_users[2-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_send_mail_users[3-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_send_mail_users[4-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_send_mail_users[5-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_send_mail_users[6-200] - TypeError: send_mai...
FAILED tests/test_views.py::test_lock_activity[0-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[1-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[2-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[3-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[4-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[5-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[6-200] - assert 400 == 200
FAILED tests/test_views.py::test_get_feedback_maillist[0-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[1-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[2-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[3-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[4-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[5-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[6-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_save_activity[0-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity[1-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity[2-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity[3-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity[4-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity[5-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity[6-200] - assert 200 == 400
FAILED tests/test_views.py::test_save_activity_guestlogin - assert 200 == 400
FAILED tests/test_views.py::test_display_activity_guestlogin - ValueError: no...
FAILED tests/test_views.py::test_display_activity_users[0-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity_users[1-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity_users[2-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity_users[3-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity_users[4-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity_users[5-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity_users[6-200] - ValueError: ...
FAILED tests/test_views.py::test_display_activity[0-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity[1-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity[2-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity[3-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity[4-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity[5-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity[6-200] - ValueError: not en...
FAILED tests/test_views.py::test_display_activity_1 - ValueError: not enough ...
FAILED tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_check_authority_action - AttributeError: 'No...
ERROR tests/test_utils.py::test_get_contributors - invenio_pidstore.errors.PI...
==== 120 failed, 292 passed, 10615 warnings, 1 error in 13000.84s (3:36:40) ====
ERROR: InvocationError for command /code/modules/weko-workflow/.tox/c1/bin/pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
